Simple In-service Upgrade Example
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This example demonstrates the use of the MAAPI calls that must be used
to perform an in-service upgrade. These are done in upgrade.c, a program
that is intended to be run as CLI custom command via osCommand in the
clispec, but it could also be run directly from the OS shell.

The actual upgrading is very simple here, in order to focus on the basic
procedure: a single YANG module has some modifications that are handled
completely by the CDB automatic upgrade, a command is added to the
clispecs, and a user-defined type is added. The only application is a
CDB subscriber that is only interested in the string form of a single
leaf (the type of that leaf is change in the upgrade though).

The example uses two versions v1 and v2 of a "package", where each
version includes all the .fxs, .ccl, etc files as well as the docroot
tree for the Web UI. The versions are "installed" under pkg/v1 and
pkg/v2, with a symlink pkg/current pointing to the currently used
version.

For Juniper CLI see line that begins with (J). Not available in ConfD Free.
For Cisco XR CLI see line that begins with (C).

A NETCONF client called 'netconf-console' is used in this example.
The 'netconf-console' is part of the ConfD installation (found in
the 'bin' directory). This client communicates with ConfD over SSH and
requires Python Paramiko package (on Ubuntu you can install it by command
'apt-get install python-paramiko').
In case SSH cannot be used, there is 'netconf-console-tcp' variant. To
use 'netconf-console-tcp', update 'confd.conf' to enable
'netconf/transport/tcp' and change all 'netconf-console' calls
to 'netconf-console-tcp' (in 'Makefile').

Running the Example
~~~~~~~~~~~~~~~~~~~

 1. Build the necessary files and start ConfD and the CDB subscriber by
    typing

        $ make all start

Now ConfD is running with package v1. You can inspect the configuration
e.g. via the CLI by typing, in a different window

        $ make cli

If you enter configure mode, you can change the value of the leaf the
CDB subscriber is monitoring by typing

        (J) set simple color red
        (J) commit

        (C) simple color red
        (C) commit

- and see the subscriber report the new value in the first window. If
you exit back to operational mode, you can also try the command

       version

This gives an error, since the command doesn't exist.

 2. Exit the CLI if you ran it in step 1, or use a third window for this
    step. Without stopping ConfD, build and "install" package v2:

        $ make pkg_v2

 3. Now we are ready for the upgrade. In a CLI operational mode session,
    give the command:

        upgrade to v2

Some progress messages are printed and finally a success message, all
generated by the 'upgrade' program as it proceeds through the phases of
the upgrade, and ConfD is now running package v2. The CDB subscriber
reports that it called confd_load_schemas() as a result of receiving a
CONFD_UPGRADE_COMMITED event notification.

 4. Stay in the CLI and try the 'version' command again - it now works,
    since it was added in v2. You can also enter configure mode and do

        (J) set simple color blue
        (J) commit

        (C) simple color blue
        (C) commit

The CDB subscriber correctly reports the new value, even though the leaf
now has C_ENUM_HASH (i.e. an integer) as value representation instead of
the earlier C_BUF (a string), thanks to the confd_reload_schemas() call.

Other things to try
~~~~~~~~~~~~~~~~~~~

1. Do a "downgrade" after the upgrade by giving the command (again
   in operational mode in the CLI)

        upgrade to v1

You can in fact switch back and forth between the two versions any
number of times this way.

2. Start two CLI sessions, and enter configure mode in one of them.
   Give the upgrade command in the operational mode session. This will
   not work with ConfD Free because it only supports one session.

The upgrade cannot proceed with a session in configure mode, and the
'upgrade' program will repeatedly print messages urging users to exit
configure mode. If you exit from configure mode within 60 seconds, the
upgrade will proceed, otherwise it will be aborted and ConfD continues
to run the original version. The timeout can be given as a parameter to
the upgrade command, 60 is just the default given in the clispec.

3. Same as previous, but add the 'force' parameter to the upgrade
   command, and don't exit from configure mode in the other session.

