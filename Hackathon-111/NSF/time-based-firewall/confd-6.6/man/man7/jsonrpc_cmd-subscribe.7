.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "JSONRPC_CMD\-SUBSCRIBE" "" "February 2016" "" ""
.
.SH "NAME"
\fBjsonrpc_cmd\-subscribe\fR
.
.SH "METHOD get_subscriptions"
Get a list of the session\'s subscriptions
.
.SS "PARAMS"
.
.nf

{}
.
.fi
.
.SS "RESULT"
.
.nf

{"subscriptions": <array of subscription>}

subscription =
 {"params": <object>,
  "comet_id": <string>,
  "handle": <string>,
  "tag": <"string">,
  "started": <boolean>,
  "stopped": <boolean; should be always false>}
.
.fi
.
.SH "METHOD subscribe_cdboper"
Starts a subscriber to operational data in CDB\. Changes done to configuration data will not be seen here\.
.
.P
\fBNOTE\fR: the \fBstart_subscription\fR method must be called to actually get the subscription to generate any messages, unless the \fBhandle\fR is provided as input\.
.
.P
\fBNOTE\fR: the \fBunsubscribe\fR method should be used to end the subscription\.
.
.P
\fBNOTE\fR: As soon as a subscription message is generated it will be sent as a message and turn up as result to your polling call to the \fBcomet\fR method\.
.
.SS "PARAMS"
.
.nf

{"comet_id": <string>,
 "handle": <string, optional>,
 "path": <string>}
.
.fi
.
.P
The \fBpath\fR param is a keypath restricting the subscription messages to only be about changes done under that specific keypath\.
.
.SS "RESULT"
.
.nf

{"handle": <string>}
.
.fi
.
.P
A handle to the subscription is returned (equal to \fBhandle\fR if provided)\.
.
.P
Subscription messages will end up in the \fBcomet\fR method and the format of that message will be an array of changes of the same type as returned by the \fBchanges\fR method\. See above\.
.
.SS "ERRORS (SPECIFIC)"
.
.nf

{"type": "db\.cdb_operational_not_enabled"}
.
.fi
.
.SH "METHOD subscribe_changes"
Starts a subscriber to configuration data in CDB\. Changes done to operational data in CDB data will not be seen here\. Furthermore, subscription messages will only be generated when a transaction is successfully committed\.
.
.P
\fBNOTE\fR: the \fBstart_subscription\fR method must be called to actually get the subscription to generate any messages, unless the \fBhandle\fR is provided as input\.
.
.P
\fBNOTE\fR: the \fBunsubscribe\fR method should be used to end the subscription\.
.
.P
\fBNOTE\fR: As soon as a subscription message is generated it will be sent as a message and turn up as result to your polling call to the \fBcomet\fR method\.
.
.SS "PARAMS"
.
.nf

{"comet_id": <string>,
 "handle": <string, optional>,
 "path": <string>,
 "skip_local_changes": <boolean, default: false>,
 "hide_changes": <boolean, default: false>,
 "hide_values": <boolean, default: false>}
.
.fi
.
.P
The \fBpath\fR param is a keypath restricting the subscription messages to only be about changes done under that specific keypath\.
.
.P
The \fBskip_local_changes\fR param specifies if configuration changes done by the owner of the read\-write transaction should generate subscription messages\.
.
.P
The \fBhide_changes\fR and \fBhide_values\fR params specify a lower level of information in subscription messages, in case it is enough to receive just a "ping" or a list of changed keypaths, respectively, but not the new values resulted in the changes\.
.
.SS "RESULT"
.
.nf

{"handle": <string>}
.
.fi
.
.P
A handle to the subscription is returned (equal to \fBhandle\fR if provided)\.
.
.P
Subscription messages will end up in the \fBcomet\fR method and the format of that message will be an object such as:
.
.IP "" 4
.
.nf

{"db": <"running" | "startup" | "candidate">,
 "user": <string>,
 "ip": <string>,
 "changes": <array>}
.
.fi
.
.IP "" 0
.
.P
The \fBuser\fR and \fBip\fR properties are the username and ip\-address of the committing user\.
.
.P
The \fBchanges\fR param is an array of changes of the same type as returned by the \fBchanges\fR method\. See above\.
.
.SH "METHOD subscribe_poll_leaf"
Starts a polling subscriber to any type of operational and configuration data (outside of CDB as well)\.
.
.P
\fBNOTE\fR: the \fBstart_subscription\fR method must be called to actually get the subscription to generate any messages, unless the \fBhandle\fR is provided as input\.
.
.P
\fBNOTE\fR: the \fBunsubscribe\fR method should be used to end the subscription\.
.
.P
\fBNOTE\fR: As soon as a subscription message is generated it will be sent as a message and turn up as result to your polling call to the \fBcomet\fR method\.
.
.SS "PARAMS"
.
.nf

{"th": <number>,
 "path": <string>,
 "interval": <number>,
 "comet_id": <string>,
 "handle": <string, optional>}
.
.fi
.
.P
The \fBpath\fR param is a keypath pointing to a leaf value\.
.
.P
The \fBinterval\fR is a timeout in seconds between when to poll the value\.
.
.SS "RESULT"
.
.nf

{"handle": <string>}
.
.fi
.
.P
A handle to the subscription is returned (equal to \fBhandle\fR if provided)\.
.
.P
Subscription messages will end up in the \fBcomet\fR method and the format of is a simple string value\.
.
.SH "METHOD subscribe_upgrade"
Starts a subscriber to upgrade messages\.
.
.P
\fBNOTE\fR: the \fBstart_subscription\fR method must be called to actually get the subscription to generate any messages, unless the \fBhandle\fR is provided as input\.
.
.P
\fBNOTE\fR: the \fBunsubscribe\fR method should be used to end the subscription\.
.
.P
\fBNOTE\fR: As soon as a subscription message is generated it will be sent as a message and turn up as result to your polling call to the \fBcomet\fR method\.
.
.SS "PARAMS"
.
.nf

{"comet_id": <string>,
 "handle": <string, optional>}
.
.fi
.
.SS "RESULT"
.
.nf

{"handle": <string>}
.
.fi
.
.P
A handle to the subscription is returned (equal to \fBhandle\fR if provided)\.
.
.P
Subscription messages will end up in the \fBcomet\fR method and the format of that message will be an object such as:
.
.IP "" 4
.
.nf

{"upgrade_state": <"wait_for_init" | "init" | "abort" | "commit">,
 "timeout": <number, only if "upgrade_state" === "wait_for_init">}
.
.fi
.
.IP "" 0
.
.SH "METHOD subscribe_jsonrpc_batch"
Starts a subscriber to JSONRPC messages for batch requests\.
.
.P
\fBNOTE\fR: the \fBstart_subscription\fR method must be called to actually get the subscription to generate any messages, unless the \fBhandle\fR is provided as input\.
.
.P
\fBNOTE\fR: the \fBunsubscribe\fR method should be used to end the subscription\.
.
.P
\fBNOTE\fR: As soon as a subscription message is generated it will be sent as a message and turn up as result to your polling call to the \fBcomet\fR method\.
.
.SS "PARAMS"
.
.nf

{"comet_id": <string>,
 "handle": <string, optional>}
.
.fi
.
.SS "RESULT"
.
.nf

{"handle": <string>}
.
.fi
.
.P
A handle to the subscription is returned (equal to \fBhandle\fR if provided)\.
.
.P
Subscription messages will end up in the \fBcomet\fR method having exact same structure like a JSONRPC response:
.
.IP "" 4
.
.nf

{"jsonrpc":"2\.0",
 "result":"admin",
 "id":1}
.
.fi
.
.IP "" 0
.
.IP "" 4
.
.nf

{"jsonrpc": "2\.0",
 "id": 1,
 "error":
 {"code": \-32602,
  "type": "rpc\.method\.unexpected_params",
  "message": "Unexpected params",
  "data":
  {"param": "foo"}}}
.
.fi
.
.IP "" 0
.
.SH "METHOD start_subscription"
Signals that a subscribe command can start to generate output\.
.
.P
\fBNOTE\fR: This method must be called to actually start the activity initiated by calls to one of the methods \fBsubscribe_cdboper\fR, \fBsubscribe_changes\fR, \fBsubscribe_messages\fR, \fBsubscribe_poll_leaf\fR or \fBsubscribe_upgrade\fR \fBwith no \fBhandle\fR\fR
.
.SS "PARAMS"
.
.nf

{"handle": <string>}
.
.fi
.
.P
The \fBhandle\fR param is as returned from a call to \fBsubscribe_cdboper\fR, \fBsubscribe_changes\fR, \fBsubscribe_messages\fR, \fBsubscribe_poll_leaf\fR or \fBsubscribe_upgrade\fR\.
.
.SS "RESULT"
.
.nf

{}
.
.fi
.
.SH "METHOD unsubscribe"
Stops a subscriber
.
.P
\fBNOTE\fR: This method must be called to stop the activity started by calls to one of the methods \fBsubscribe_cdboper\fR, \fBsubscribe_changes\fR, \fBsubscribe_messages\fR, \fBsubscribe_poll_leaf\fR or \fBsubscribe_upgrade\fR\.
.
.SS "PARAMS"
.
.nf

{"handle": <string>}
.
.fi
.
.P
The \fBhandle\fR param is as returned from a call to \fBsubscribe_cdboper\fR, \fBsubscribe_changes\fR, \fBsubscribe_messages\fR, \fBsubscribe_poll_leaf\fR or \fBsubscribe_upgrade\fR\.
.
.SS "RESULT"
.
.nf

{}
.
.fi

