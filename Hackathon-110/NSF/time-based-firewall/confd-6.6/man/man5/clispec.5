'\" t
.\"     Title: clispec
.\"    Author:  <support@tail-f.com>
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 03/02/2018
.\"    Manual: ConfD Manual
.\"    Source: Tail-f Systems
.\"  Language: English
.\"
.TH "CLISPEC" "5" "03/02/2018" "Tail-f Systems" "ConfD Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
clispec \- CLI specification file format
.SH "DESCRIPTION"
.PP
This manual page describes the syntax and semantics of a ConfD CLI specification file (from now on called "clispec")\&. A clispec is an XML configuration file describing commands to be added to the automatically rendered Juniper and Cisco style ConfD CLI\&. It also makes it possible to modify the behavior of standard/built\-in commands, using move/delete operations and customizable confirmation prompts\&. In Cisco style custom mode\-specific commands can be added by specifying a mount point relating to the specified mode\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBTip\fR
.ps -1
.br
.PP
In the ConfD distribution there is an Emacs mode suitable for clispec editing\&.
.sp .5v
.RE
.PP
A clispec file (with a \&.cli suffix) is to be compiled using the
\fBconfdc\fR
compiler into an internal representation (with a \&.ccl suffix), ready to be loaded by the ConfD daemon on startup\&. Like this:
.sp
.if n \{\
.RS 4
.\}
.nf
    $ confdc \-c commands\&.cli
    $ ls commands\&.ccl
    commands\&.ccl
  
.fi
.if n \{\
.RE
.\}
.PP
The \&.ccl file should be put in the ConfD daemon loadPath as described in
\m[blue]\fBconfd\&.conf(5)\fR\m[]
When the ConfD daemon is started the clispec is loaded accordingly\&.
.PP
The ConfD daemon loads all \&.ccl files it finds on startup\&. Ie, you can have one or more clispec files for Cisco XR (C) style CLI emulation, one or more for Cisco IOS (I), and one or more for Juniper (J) style emulation\&. If you drop several \&.ccl files in the loadPath all will be loaded\&. The standard commands are defined in
confd\&.cli (available in the ConfD distribution)\&. The intention is that we use
confd\&.cli as a starting point, i\&.e\&. first we delete, reorder and replace built\-in commands (if needed) and we then proceed to add our own custom commands\&.
.SH "EXAMPLE"
.PP
The
confd\-light\&.cli example is a light version of the standard
confd\&.cli\&. It adds one operational mode command and one configure mode command, implemented by two OS executables, it also removes the \*(Aqsave\*(Aq command from the pipe commands\&.
.PP
\fBExample\ \&1.\ \&confd-light.cli\fR
.sp
.if n \{\
.RS 4
.\}
.nf
<clispec xmlns="http://tail\-f\&.com/ns/clispec/1\&.0" style="j">
  <operationalMode>
    <modifications>
      <delete src="file"/>
      <confirmText src="quit">
        Are you really sure you want to quit?
      </confirmText>
      <help src="configure private">Edit a private copy of the configuration</help>
      <info src="configure private">Edit a private copy of the configuration</info>
    </modifications>

    <cmd name="copy" mount="file">
      <info>Copy a file</info>
      <help>Copy a file in the file system\&.</help>
      <callback>
        <exec>
          <osCommand>cp</osCommand>
          <options>
            <uid>confd</uid>
          </options>
        </exec>
      </callback>
      <params>
        <param>
          <type><file/></type>
          <info>&lt;source file&gt;</info>
        </param>
        <param>
          <type><file/></type>
          <info>&lt;destination&gt;</info>
        </param>
      </params>
    </cmd>
  </operationalMode>

  <configureMode>
    <cmd name="adduser" mount="wizard">
      <info>Create a user</info>
      <help>Create a user and assign him/her to a group\&.</help>
      <callback>
        <exec>
          <osCommand>adduser\&.sh</osCommand>
        </exec>
      </callback>
    </cmd>
  </configureMode>

  <pipeCmds>
    <modifications>
      <delete src="save"/>
    </modifications>
  </pipeCmds>
</clispec>
      
.fi
.if n \{\
.RE
.\}
.PP
confd\-light\&.cli achieves the following:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Adds a confirmation prompt to the standard operation "delete" command\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Deletes the standard "file" command\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Adds the operational mode command "copy" and mounts it under the standard "file" command\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The "copy" command is implemented using the OS executable "/usr/bin/cp"\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The executable is called with parameters as defined by the "params" element\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The executable runs as the same user id as ConfD as defined by the "uid" element\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Adds the configure command "adduser" and mounts it under the standard "wizard" command\&.
.RE
.PP
Below we present the gory details when it comes to constructs in a clispec\&.
.SH "ELEMENTS AND ATTRIBUTES"
.PP
This section lists all clispec elements and their attributes including their type (within parentheses) and default values (within square brackets)\&. Elements are written using a path notation to make it easier to see how they relate to each other\&.
.PP
\fINote:\fR
$MODE is either "operationalMode", "configureMode" or "pipeCmds"\&.
.SS "/clispec"
.PP
This is the top level element which contains (in order) zero or more "operationalMode" elements, zero or more "configureMode" element, and zero or more "pipeCmds" elements\&.
.PP
It has a style attribute which can have the value "j", "i" or "c"\&. If no style attribute is specified it defaults to "j"\&.
.SS "/clispec/$MODE"
.PP
The $MODE ("operationalMode", "configureMode", or "pipeCmds") element contains (in order) zero or one "modifications" elements, zero or more "start" elements, zero or more "show" elements, and zero or more "cmd" elements\&.
.PP
The "show" elements are only used in the C\-style CLI\&.
.PP
It has a name attribute which is used to create a named custom mode\&. A custom command can be defined for entering custom modes\&. See the cmd/callback/mode elements below\&.
.SS "/clispec/$MODE/modifications"
.PP
The "modifications" element describes which operations to apply to the built\-in commands\&. It contains (in any order) zero or more "delete", "move", "paginate", "info", "paraminfo", "help", "paramhelp", "confirmText", "defaultConfirmOption", "dropElem", "compactElem", "compactStatsElem", "columnStats", "multiValue", "columnWidth", "columnAlign", "defaultColumnAlign", "noKeyCompletion", "noMatchCompletion", "modeName", "suppressMode", "suppressTable", "enforceTable", "showTemplate", "showTemplateLegend", "showTemplateEnter", "showTemplateFooter", "runTemplate", "runTemplateLegend", "runTemplateEnter", "runTemplateFooter", "addMode", "autocommitDelay", "keymap", "pipeFlags", "addPipeFlags", "negPipeFlags", "legend", "footer", "suppressKeyAbbrev", "allowKeyAbbrev", "hasRange", "suppressRange", "allowWildcard", "suppressWildcard", "suppressValidationWarningPrompt", "displayEmptyConfig", "displayWhen", "customRange", "completion", "suppressKeySort" and "simpleType" elements\&.
.SS "/clispec/$MODE/modifications/paginate"
.PP
The "paginate" element can be used to change the default paginate behavior for a built\-in command\&.
.PP
Attributes:
.PP
\fIpath\fR (cmdpathType)
.RS 4
The "path" attribute is mandatory\&. It specifies which command to change\&. cmdpathType is a space\-separated list of commands, pointing out a specific sub\-command\&.
.RE
.PP
\fIvalue\fR (true|false)
.RS 4
The "value" attribute is mandatory\&. It specifies whether the paginate attribute should be enabled or disabled by default\&.
.RE
.SS "/clispec/$MODE/modifications/displayWhen"
.PP
The "displayWhen" element can be used to add a displayWhen xpath condition to a command\&.
.PP
Attributes:
.PP
\fIpath\fR (cmdpathType)
.RS 4
The "path" attribute is mandatory\&. It specifies which command to change\&. cmdpathType is a space\-separated list of commands, pointing out a specific sub\-command\&.
.RE
.PP
\fIexpr\fR (xpath expression)
.RS 4
The "expr" attribute is mandatory\&. It specifies an xpath expression\&. If the expression evaluates to true then the command is available, otherwise not\&.
.RE
.PP
\fIctx\fR (path)
.RS 4
The "ctx" attribute is optional\&. If not specified the current editpath/mode\-path is used as context node for the xpath evaluation\&. Note that the xpath expression will automatically evaluate to false if a display when expression is used for a top\-level command and no ctx is specified\&. The path may contain variables defined in the dict\&.
.RE
.SS "/clispec/$MODE/modifications/move"
.PP
The "move" element can be used to move (rename) a built\-in command\&.
.PP
Attributes:
.PP
\fIsrc\fR (cmdpathType)
.RS 4
The "src" attribute is mandatory\&. It specifies which command to move\&. cmdpathType is a space\-separated list of commands, pointing out a specific sub\-command\&.
.RE
.PP
\fIdest\fR (cmdpathType)
.RS 4
The "dest" attribute is mandatory\&. It specifies where to move the command specified by the "src" attribute\&. cmdpathType is a space\-separated list of commands, pointing out a specific sub\-command\&.
.RE
.PP
\fIinclSubCmds\fR (xs:boolean)
.RS 4
The "inclSubCmds" attribute is optional\&. If specified and set to true then all commands to which the \*(Aqsrc\*(Aq command is a prefix command will be included in the move operation\&.
.sp
An example:
.sp
.if n \{\
.RS 4
.\}
.nf
        <configureMode>
          <modifications>
            <move src="load" dest="xload" inclSubCmds="true"/>
          </modifications>
        </configureMode>
        
.fi
.if n \{\
.RE
.\}
.sp
would in the C\-style CLI move \*(Aqload\*(Aq, \*(Aqload merge\*(Aq, \*(Aqload override\*(Aq and \*(Aqload replace\*(Aq to \*(Aqxload\*(Aq, \*(Aqxload merge\*(Aq, \*(Aqxload override\*(Aq and \*(Aqxload replace\*(Aq, respectively\&.
.RE
.SS "/clispec/$MODE/modifications/copy"
.PP
The "copy" element can be used to copy a built\-in command\&.
.PP
Attributes:
.PP
\fIsrc\fR (cmdpathType)
.RS 4
The "src" attribute is mandatory\&. It specifies which command to copy\&. cmdpathType is a space\-separated list of commands, pointing out a specific sub\-command\&.
.RE
.PP
\fIdest\fR (cmdpathType)
.RS 4
The "dest" attribute is mandatory\&. It specifies where to copy the command specified by the "src" attribute\&. cmdpathType is a space\-separated list of commands, pointing out a specific sub\-command\&.
.RE
.PP
\fIinclSubCmds\fR (xs:boolean)
.RS 4
The "inclSubCmds" attribute is optional\&. If specified and set to true then all commands to which the \*(Aqsrc\*(Aq command is a prefix command will be included in the copy operation\&.
.sp
An example:
.sp
.if n \{\
.RS 4
.\}
.nf
        <configureMode>
          <modifications>
            <copy src="load" dest="xload" inclSubCmds="true"/>
          </modifications>
        </configureMode>
        
.fi
.if n \{\
.RE
.\}
.sp
would in the C\-style CLI copy \*(Aqload\*(Aq, \*(Aqload merge\*(Aq, \*(Aqload override\*(Aq and \*(Aqload replace\*(Aq to \*(Aqxload\*(Aq, \*(Aqxload merge\*(Aq, \*(Aqxload override\*(Aq and \*(Aqxload replace\*(Aq, respectively\&.
.RE
.SS "/clispec/$MODE/modifications/delete"
.PP
The "delete" element makes it possible to delete a built\-in command\&. Note that commands that are auto\-rendered from the data model cannot be removed using this modification\&. To remove an auto\-rendered command use the \*(Aqtailf:hidden\*(Aq element in the data model\&.
.PP
Attributes:
.PP
\fIsrc\fR (cmdpathType)
.RS 4
The "src" attribute is mandatory\&. It specifies which command to delete\&. cmdpathType is a space\-separated list of commands, pointing out a specific sub\-command\&.
.RE
.SS "/clispec/$MODE/modifications/pipeFlags"
.PP
The "pipeFlags" element makes it possible to modify the pipe flags of the builtin commands\&. The argument is a space separated list of pipe flags\&. It will replace the builtin list\&.
.PP
Attributes:
.PP
\fIsrc\fR (cmdpathType)
.RS 4
The "src" attribute is mandatory\&. It specifies which command to modify\&. cmdpathType is a space\-separated list of commands, pointing out a specific sub\-command\&.
.RE
.SS "/clispec/$MODE/modifications/addPipeFlags"
.PP
The "addPipeFlags" element makes it possible to add pipe flags to the existing list of pipe flags for a builtin command\&. The argument is a space separated list of pipe flags\&.
.PP
Attributes:
.PP
\fIsrc\fR (cmdpathType)
.RS 4
The "src" attribute is mandatory\&. It specifies which command to modify\&. cmdpathType is a space\-separated list of commands, pointing out a specific sub\-command\&.
.RE
.SS "/clispec/$MODE/modifications/negPipeFlags"
.PP
The "negPipeFlags" element makes it possible to modify the neg pipe flags of the builtin commands\&. The argument is a space separated list of neg pipe flags\&. It will replace the builtin list\&.
.PP
Attributes:
.PP
\fIsrc\fR (cmdpathType)
.RS 4
The "src" attribute is mandatory\&. It specifies which command to modify\&. cmdpathType is a space\-separated list of commands, pointing out a specific sub\-command\&.
.RE
.SS "/clispec/$MODE/modifications/dropElem"
.PP
The "dropElem" element makes it possible to drop node in the data model from paths in the Cisco style CLIs\&. If you drop a child node to a list node we recommend that you also use suppressMode on that list node, otherwise the CLI will be very confusing\&. For example, for the alias command in the CLI\&. If we only dropped the expansion node but did not suppress the automatic mode creation for the alias node, when you typed the alias command you would end up in the alias submode, but since you have dropped the expansion node you end up specifying the expansion directly without typing any command\&. Quite confusing\&.
.PP
Note that dropped nodes to not appear in match completions\&.
.PP
Attributes:
.PP
\fIsrc\fR (pathType)
.RS 4
The "src" attribute is mandatory\&. It specifies which path to drop\&. pathType is a space\-separated list of elements, pointing out a specific list element\&.
.RE
.PP
Note that the tailf:cli\-drop\-node\-name YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/compactElem"
.PP
The "compactElem" element tells the C\- and I\-style CLIs \*(Aqshow running\-configuration\*(Aq command to use the compact representation for this path\&. The compact representation means that all leaf elements are shown on a single line\&.
.PP
Attributes:
.PP
\fIsrc\fR (pathType)
.RS 4
The "src" attribute is mandatory\&. It specifies which path to make compact\&. pathType is a space\-separated list of elements, pointing out a specific list element\&.
.RE
.PP
Note that the tailf:cli\-compact\-syntax YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/compactStatsElem"
.PP
The "compactStatsElem" element tells the show command in the C\- and I\-style CLIs to use the compact representation for this path\&. The compact representation means that all leaf elements are shown on a single line\&.
.PP
Attributes:
.PP
\fIsrc\fR (pathType)
.RS 4
The "src" attribute is mandatory\&. It specifies which path to make compact\&. pathType is a space\-separated list of elements, pointing out a specific element\&.
.RE
.PP
\fIwrap\fR (xs:boolean)
.RS 4
The "wrap" attribute is optional\&. It specified whether the line should be wrapped at screen\-width or not\&.
.RE
.PP
\fIdelimiter\fR (xs:string)
.RS 4
The "delimiter" attribute is optional\&. It specified which string to use between the element name and the value when displaying leaf values\&.
.RE
.PP
\fIprettify\fR(xs:boolean)
.RS 4
The "prettify" attribute is optional\&. If set to \*(Aqtrue\*(Aq then dash:es and underscores will be replaced by spaces in leaf element names\&.
.RE
.PP
\fIspacer\fR (xs:string)
.RS 4
The "spacer" attribute is optional\&. It specified which string to use between the elements when displayed in compact format\&.
.RE
.PP
\fIwidth\fR (xs:positiveInteger)
.RS 4
The "width" attribute is optional\&. It specified a fixed terminal width to use before wrapping line\&. It is only used when wrap is set to \*(Aqtrue\*(Aq\&. If width is not specified the line is wrapped when the terminal width is reached\&.
.RE
.PP
Note that the tailf:cli\-compact\-stats YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/columnWidth"
.PP
The "columnWidth" element can be used to set fixed widths for specific columns in auto\-rendered tables\&.
.PP
Attributes:
.PP
\fIpath\fR (pathType)
.RS 4
The "path" attribute is mandatory\&. It specifies which path to set the column width for\&. pathType is a space\-separated list of node names, pointing out a specific data model node\&.
.RE
.PP
\fIwidth\fR (xs:positiveInteger)
.RS 4
The "width" attribute is mandatory\&. It specified a fixed column width\&.
.RE
.PP
Note that the tailf:cli\-column\-width YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/columnAlign"
.PP
The "columnAlign" element can be used to specify the alignment of the data in specific columns in auto\-rendered tables\&.
.PP
Attributes:
.PP
\fIpath\fR (pathType)
.RS 4
The "path" attribute is mandatory\&. It specifies which path to set the column alignment for\&. pathType is a space\-separated list of node names, pointing out a specific data model node\&.
.RE
.PP
\fIalign\fR (left|right|center)
.RS 4
The "align" attribute is mandatory\&.
.RE
.PP
Note that the tailf:cli\-column\-align YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/defaultColumnAlign"
.PP
The "defaultColumnAlign" element can be used to specify a default alignment of a simpletype when used in auto\-rendered tables\&.
.PP
Attributes:
.PP
\fInamespace\fR (xs:string)
.RS 4
The "namespace" attribute is required\&. It specifies in which namespace the type is found\&. It can be either the namespace URI or the namespace prefix\&.
.RE
.PP
\fIname\fR (xs:string)
.RS 4
The "name" attribute is required\&. It specifies the name of the type in the given namespace\&.
.RE
.PP
\fIalign\fR (left|right|center)
.RS 4
The "align" attribute is mandatory\&.
.RE
.SS "/clispec/$MODE/modifications/multiLinePrompt"
.PP
The "multiLinePrompt" element can be used to specify that the CLI should automatically enter multi\-line prompt mode when prompting for values of the given type\&.
.PP
Attributes:
.PP
\fInamespace\fR (xs:string)
.RS 4
The "namespace" attribute is required\&. It specifies in which namespace the type is found\&. It can be either the namespace URI or the namespace prefix\&.
.RE
.PP
\fIname\fR (xs:string)
.RS 4
The "name" attribute is required\&. It specifies the name of the type in the given namespace\&.
.RE
.SS "/clispec/$MODE/modifications/columnStats"
.PP
The "columnStats" element tells the Cisco style CLIs show command to display elements in a container as a column, ie to not repeat the name of the container element on each line but instead indent each leaf under the container\&.
.PP
Attributes:
.PP
\fIsrc\fR (pathType)
.RS 4
The "src" attribute is mandatory\&. It specifies which path to make display as a column\&. pathType is a space\-separated list of elements, pointing out a specific container element\&.
.RE
.PP
Note that the tailf:cli\-column\-stats YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/showTemplate"
.PP
The "showTemplate" element is used for specifying a template to use by the show command in the J\-, C\- and I\-style CLIs\&.
.PP
Show templates are associated with YANG nodes and are used by the CLI when the \*(Aqshow\*(Aq command is given for a path in operational mode\&. It is primarily intended for displaying "config false" data but "config true" data may be included in the template as well\&.
.PP
The template may contain a mix of text and expandable entries\&. Expandable entries all start with $( and end with a matching )\&. Parentheses and dollar signes needs to be quoted in plain\-text\&.
.PP
Expansion:
.PP
Parameter is either a relative or absolute path to a leaf (eg /foo/bar, foo/bar), or one of the builtin variables: \&.selected, \&.entered, \&.legend_shown, \&.user, \&.groups, \&.ip, \&.display_groups, \&.path, \&.ipath or \&.licounter\&. In addition the variables "spath" and "ispath" are available when a command is executed from a show path\&.
.PP
\fI\&.selected\fR
.RS 4
The
\fI\&.selected\fR
variable contains the list of selected paths to be shown\&. The show template can inspect this element to determine if a given element should be displayed or not\&. For example:
.sp
.if n \{\
.RS 4
.\}
.nf
$(\&.selected~=hwaddr?HW Address)
        
        
.fi
.if n \{\
.RE
.\}
.RE
.PP
\fI\&.entered\fR
.RS 4
The
\fI\&.entered\fR
variable is true if the "entered" text has been displayed (either the auto generated text or a showTemplateEnter)\&. This is useful when having a non\-table template where each instance should have a text\&.
.sp
.if n \{\
.RS 4
.\}
.nf
$(\&.entered?:host $(name))
        
        
.fi
.if n \{\
.RE
.\}
.RE
.PP
\fI\&.legend_shown\fR
.RS 4
The
\fI\&.legend_shown\fR
variable is true if the "legend" text has been displayed (either the auto generated table header or a showTemplateLegend)\&. This is useful to inspect when displaying a table row\&. If the user enteres the path to a specific instance the builtin table header will not be displayed and the showTemplateLegend will not be invoked and it may be useful to render the legend specifically for this instance\&.
.sp
.if n \{\
.RS 4
.\}
.nf
$(\&.legend_shown!=true?Address         Interface)
        
        
.fi
.if n \{\
.RE
.\}
.RE
.PP
\fI\&.user\fR
.RS 4
The
\fI\&.user\fR
variable contains the name of the current user\&. This can be used for differentiating the content displayed for a specific user, or in paths\&. For example:
.sp
.if n \{\
.RS 4
.\}
.nf
$(user{$(\&.user)}/settings)
        
        
.fi
.if n \{\
.RE
.\}
.RE
.PP
\fI\&.groups\fR
.RS 4
The
\fI\&.groups\fR
variable contains the a list of groups that the user belongs to\&.
.RE
.PP
\fI\&.display_groups\fR
.RS 4
The
\fI\&.display_groups\fR
variable contains a list of selected display groups\&. This can be used to display different content depending on the selected display group\&. For example:
.sp
.if n \{\
.RS 4
.\}
.nf
$(\&.display_groups~=details?details\&.\&.\&.)
        
        
.fi
.if n \{\
.RE
.\}
.RE
.PP
\fI\&.ip\fR
.RS 4
The
\fI\&.ip\fR
variable contains the ip address that the user connected from\&.
.RE
.PP
\fI\&.path\fR
.RS 4
The
\fI\&.path\fR
variable contains the path to the entry, formatted in CLI style\&.
.RE
.PP
\fI\&.ipath\fR
.RS 4
The
\fI\&.ipath\fR
variable contains the path to the entry, formatted in template style\&.
.RE
.PP
\fI\&.spath\fR
.RS 4
The
\fI\&.spath\fR
variable contains the show path, formatted in CLI style\&.
.RE
.PP
\fI\&.ispath\fR
.RS 4
The
\fI\&.ipath\fR
variable contains the show path, formatted in template style\&.
.RE
.PP
\fI\&.licounter\fR
.RS 4
The
\fI\&.licounter\fR
variable contains a counter that is incremented for each instance in a list\&. This means that it will be 0 in the legend, contain the total number of list instances in the footer and something in between in the basic show template\&.
.RE
.PP
\fI$(parameter)\fR
.PP
The value of parameter is substituted\&.
.PP
\fI$(cond?word1:word2)\fR
.PP
The expansion of word1 is substituted if the value of cond evaluates to true, otherwise the expansion of word2 is substituted\&.
.PP
cond may be one of
.PP
\fIparameter\fR
.PP
Evaluates to true if the node exists\&.
.PP
\fIparameter == <value>\fR
.PP
Evaluates to true if the value of the parameter equals <value>
.PP
\fIparameter != <value>\fR
.PP
Evaluates to true if the value of the parameter does not equal <value>
.PP
\fIparameter ~= <value>\fR
.PP
Provided that parameters value is a list then this expression evaluates to true if <value> is a member of the list\&.
.PP
\fI$(parameter|filter)\fR
.PP
The value of parameter processed by filter is substituted\&. Filters may be either one of the built\-ins or a customized filter defined in a callback\&. See /confdConfig/cli/templateFilter\&. A built\-in filter may be one of
.PP
\fIcapfirst\fR
.PP
Capitalizes the first character of the value\&.
.PP
\fIfilesizeformat\fR
.PP
Format the value in a \*(Aqhuman\-readable\*(Aq format (i\&.e\&. \*(Aq13 KB\*(Aq, \*(Aq4\&.1 MB\*(Aq \*(Aq102 bytes\*(Aq etc), where K means 1024, M means 1024*1024 etc\&.
.PP
When used without argument the default number of decimals displayed is 2\&. When used with a numeric integer argument, filesizeformat will display the given number of decimal places\&.
.PP
\fIhumanreadable\fR
.PP
Similar to filesizeformat except no bytes suffix is added\&. (i\&.e\&. \*(Aq13\&.13 k\*(Aq, \*(Aq4\&.2 M\*(Aq \*(Aq102\*(Aq etc), where k means 1000, M means 1000*1000 etc\&.
.PP
When used without argument the default number of decimals displayed is 2\&. When used with a numeric integer argument, humanreadable will display the given number of decimal places\&.
.PP
\fIcommasep\fR
.PP
Separate the numerical values into groups of three digits using a comma (e\&.g\&., 1234567 \-> 1,234,567)
.PP
\fIhex\fR
.PP
Display integer as hex number\&. An argument can be used to indicate how many digits should be used in the output\&. If the hex number is too long it will be truncated at the front, if it is too short it will be padded with zeros at the front\&. If the width is a negative number then at most that number of digits will be used, but short numbers will not be padded with zeroes\&. For example:
.sp
.if n \{\
.RS 4
.\}
.nf
value            Template                       Output
12345           {{ value|hex }}                 3039
12345           {{ value|hex:2 }}               39
12345           {{ value|hex:8 }}               00003039
.fi
.if n \{\
.RE
.\}
.PP
\fIhexlist\fR
.PP
Display integer as hex number with : between pairs\&. An argument can be used to indicate how many digits should be used in the output\&. If the hex number is too long it will be truncated at the front, if it is too short it will be padded with zeros at the front\&. If the width is a negative number then at most that number of digits will be used, but short numbers will not be padded with zeroes\&.For example:
.sp
.if n \{\
.RS 4
.\}
.nf
value            Template                       Output
12345           {{ value|hexlist }}             30:39
12345           {{ value|hexlist:2 }}           39
12345           {{ value|hexlist:8 }}           00:00:30:39
.fi
.if n \{\
.RE
.\}
.PP
\fIfloatformat\fR
.PP
Used for type \*(Aqfloat\*(Aq in tailf\-xsd\-types\&. We recommend that the YANG built\-in type \*(Aqdecimal64\*(Aq is used instead of \*(Aqfloat\*(Aq\&.
.PP
When used without an argument, rounds a floating\-point number to one decimal place \-\- but only if there\*(Aqs a decimal part to be displayed\&. For example:
.sp
.if n \{\
.RS 4
.\}
.nf
value            Template                       Output
34\&.23234        {{ value|floatformat }}         34\&.2
34\&.00000        {{ value|floatformat }}         34
34\&.26000        {{ value|floatformat }}         34\&.3
.fi
.if n \{\
.RE
.\}
.PP
If used with a numeric integer argument, floatformat rounds a number to that many decimal places\&. For example:
.sp
.if n \{\
.RS 4
.\}
.nf
value          Template                         Output
34\&.23234        {{ value|floatformat:3 }}       34\&.232
34\&.00000        {{ value|floatformat:3 }}       34\&.000
34\&.26000        {{ value|floatformat:3 }}       34\&.260
.fi
.if n \{\
.RE
.\}
.PP
If the argument passed to floatformat is negative, it will round a number to that many decimal places \-\- but only if there\*(Aqs a decimal part to be displayed\&. For example:
.sp
.if n \{\
.RS 4
.\}
.nf
value           Template                        Output
34\&.23234        {{ value|floatformat:\-3 }}      34\&.232
34\&.00000        {{ value|floatformat:\-3 }}      34
34\&.26000        {{ value|floatformat:\-3 }}      34\&.260
.fi
.if n \{\
.RE
.\}
.PP
Using floatformat with no argument is equivalent to using floatformat with an argument of \-1\&.
.PP
\fIljust:width\fR
.PP
Left\-align the value given a width\&.
.PP
\fIrjust:width\fR
.PP
Right\-align the value given a width\&.
.PP
\fItrunc:width\fR
.PP
Truncate value to a given width\&.
.PP
\fIlower\fR
.PP
Convert the value into lowercase\&.
.PP
\fIupper\fR
.PP
Convert the value into uppercase\&.
.PP
\fIshow:<dictionary>\fR
.PP
Substitutes the result of invoking the default display function for the parameter\&. The dictionary can be used for introducing own variables that can be accessed in the same manner as builtin variables\&. The user defined variables overrides builtin variables\&. The dictionary is specified as a string on the following form:
.sp
.if n \{\
.RS 4
.\}
.nf
              (key=value)(:key=value)*
.fi
.if n \{\
.RE
.\}
.sp
For example, with the following expression:
.sp
.if n \{\
.RS 4
.\}
.nf
              $(foo|show:myvar1=true:myvar2=Interface)
.fi
.if n \{\
.RE
.\}
.sp
the user defined variables can be accessed like this:
.sp
.if n \{\
.RS 4
.\}
.nf
              $(\&.myvar1!=true?Address) $(\&.myvar2)
.fi
.if n \{\
.RE
.\}
.PP
\fIdict:<dictionary>\fR
.PP
Translate the value using the dictionary\&. Can for example be used for displaying on/off instead of true/false\&.
.PP
For example
.sp
.if n \{\
.RS 4
.\}
.nf
$(foo|dict:true=on:false=off)
.fi
.if n \{\
.RE
.\}
.PP
Nested invocations are allowed, ie it is possible to have expressions like $((state|dict:yes=Yes:no=No)|rjust:14), or $(/foo{$(\&.\&./bar)})\&.
.PP
An example:
.sp
.if n \{\
.RS 4
.\}
.nf
<modifications>
  <showTemplate path="interfaces">$(name) is administratively $(status), line protocol is $(line/status)
  Hardware is $(hw), address is $(port_address) (bia $(bia))
  Internet address is $(address)
  MTU $(mtu) bytes, BW $(bw|humanreadable)bit, DLY $(dly) usec,
     reliability $(reliability), txload $(txload), rxload $(rxload)
  Encapsulation $(encapsulation|upper), $(loopback?:loopback not set)
  Keepalive $(keepalive?set to \e($(keepalive) sec\e):not set)
  ARP type: $(arpType), ARP Timeout $(arpTimeout)
  Last input $(lastInput), output $(output), output hang $(outputHang)
  Last clearing of "show interface" counters $(lastClear)
  Queuing strategy: $(queingSrategy)
  Output queue $(output/queue), $(output/drops) drops; input queue $(input/queue), $(input/drops) drops
  5 minute input rate $(input/rate) bits/sec, $(input/packetRate) packets/sec
  5 minute output rate $(output/rate) bits/sec, $(output/packetRate) packets/sec
     $(input/packets) packets input, $(input/bytes) bytes, $(input/buffer) no buffer
     Received $(input/receivedBroadcasts) broadcasts, $(input/runts) runts, $(input/giants) giants, $(input/throttle) throttles
     $(input/errors) input errors, $(input/crc) CRC, $(input/frame) frame, $(input/overrun) overrun, $(input/ignore) ignored
     $(input/dribble) input packets with dribble condition detected
     $(output/packets) packets output, $(output/bytes) bytes, $(output/underruns) underruns
     $(output/errors) output errors, $(output/collisions) collisions, $(output/resets) interface resets
     $(output/babbles) babbles, $(output/lateCollision) late collision, $(output/deferred) deferred
     $(lostCarrier) lost carrier, $(noCarrier) no carrier
     $(output/bufferFails) output buffer failures, $(output/bufferSwapped) output buffers swapped out
</showTemplate>
</modifications>
.fi
.if n \{\
.RE
.\}
.PP
Attributes:
.PP
\fIpath\fR (pathType)
.RS 4
The "path" attribute is mandatory\&. It specifies on which path to apply the show template\&. pathType is a space\-separated list of elements, pointing out a specific container element\&.
.RE
.PP
Note that the tailf:cli\-show\-template YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/showTemplateLegend"
.PP
The "showTemplateLegend" element is used for specifying a template to use by the show command in the J\-, C\- and I\-style CLIs when displaying a set of list nodes as a legend\&.
.PP
Attributes:
.PP
\fIpath\fR (pathType)
.RS 4
The "path" attribute is mandatory\&. It specifies on which path to apply the show template\&. pathType is a space\-separated list of elements, pointing out a specific container element\&.
.RE
.PP
Note that the tailf:cli\-show\-template\-legend YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/showTemplateEnter"
.PP
The "showTemplateEnter" element is used for specifying a template to use by the show command in the J\-, C\- and I\-style CLIs when displaying a set of list element nodes before displaying each instance\&.
.PP
In addition to the builtin variables in ordinary templates there are two additional variables available: \&.prefix_str and \&.key_str\&.
.PP
\fI\&.prefix_str\fR
.RS 4
The
\fI\&.prefix_str\fR
variable contains the text displayed before the key values when auto\-rendering an enter text\&.
.RE
.PP
\fI\&.key_str\fR
.RS 4
The
\fI\&.key_str\fR
variable contains the keys as a text
.RE
.PP
Attributes:
.PP
\fIpath\fR (pathType)
.RS 4
The "path" attribute is mandatory\&. It specifies on which path to apply the show template\&. pathType is a space\-separated list of elements, pointing out a specific container element\&.
.RE
.PP
Note that the tailf:cli\-show\-template\-enter YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/showTemplateFooter"
.PP
The "showTemplateFooter" element is used for specifying a template to use by the show command in the J\-, C\- and I\-style CLIs after a set of list nodes has been displayed as a table\&.
.PP
Attributes:
.PP
\fIpath\fR (pathType)
.RS 4
The "path" attribute is mandatory\&. It specifies on which path to apply the show template\&. pathType is a space\-separated list of elements, pointing out a specific container element\&.
.RE
.PP
Note that the tailf:cli\-show\-template\-footer YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/runTemplate"
.PP
The "run" element is used for specifying a template to use by the "show running\-config" command in the C\- and I\-style CLIs\&. The syntax is the same as for the showTemplate above\&. The template is only used if it is associated with a leaf element\&. Containers and lists cannot have runTemplates\&.
.PP
Note that extreme care must be taken when using this feature if the result should be paste:able into the CLI again\&.
.PP
Attributes:
.PP
\fIpath\fR (pathType)
.RS 4
The "path" attribute is mandatory\&. It specifies on which path to apply the show running\-config template\&. pathType is a space\-separated list of elements, pointing out a specific container element\&.
.RE
.PP
Note that the tailf:cli\-run\-template YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/runTemplateLegend"
.PP
The "runTemplateLegend" element is used for specifying a template to use by the show running\-config command in the C\- and I\-style CLIs when displaying a set of list nodes as a legend\&.
.PP
Attributes:
.PP
\fIpath\fR (pathType)
.RS 4
The "path" attribute is mandatory\&. It specifies on which path to apply the show running\-config template\&. pathType is a space\-separated list of elements, pointing out a specific container element\&.
.RE
.PP
Note that the tailf:cli\-run\-template\-legend YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/runTemplateEnter"
.PP
The "runTemplateEnter" element is used for specifying a template to use by the show running\-config command in the C\- and I\-style CLIs when displaying a set of list element nodes before displaying each instance\&.
.PP
In addition to the builtin variables in ordinary templates there are two additional variables available: \&.prefix_str and \&.key_str\&.
.PP
\fI\&.prefix_str\fR
.RS 4
The
\fI\&.prefix_str\fR
variable contains the text displayed before the key values when auto\-rendering an enter text\&.
.RE
.PP
\fI\&.key_str\fR
.RS 4
The
\fI\&.key_str\fR
variable contains the keys as a text
.RE
.PP
Attributes:
.PP
\fIpath\fR (pathType)
.RS 4
The "path" attribute is mandatory\&. It specifies on which path to apply the show running\-config template\&. pathType is a space\-separated list of elements, pointing out a specific container element\&.
.RE
.PP
Note that the tailf:cli\-run\-template\-enter YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/runTemplateFooter"
.PP
The "runTemplateFooter" element is used for specifying a template to use by the show running\-config command in the C\- and I\-style CLIs after a set of list nodes has been displayed as a table\&.
.PP
Attributes:
.PP
\fIpath\fR (pathType)
.RS 4
The "path" attribute is mandatory\&. It specifies on which path to apply the show running\-config template\&. pathType is a space\-separated list of elements, pointing out a specific container element\&.
.RE
.PP
Note that the tailf:cli\-run\-template\-footer YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/hasRange"
.PP
The "hasRange" element is used for specifying that a given non\-integer key element should allow range expressions
.PP
Attributes:
.PP
\fIpath\fR (pathType)
.RS 4
The "path" attribute is mandatory\&. It specifies on which path to allow range expressions\&. pathType is a space\-separated list of elements, pointing out a specific list element\&.
.RE
.PP
Note that the tailf:cli\-allow\-range YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/suppressRange"
.PP
The "suppressRange" element is used for specifying that a given integer key element should not allow range expressions
.PP
Attributes:
.PP
\fIpath\fR (pathType)
.RS 4
The "path" attribute is mandatory\&. It specifies on which path to suppress range expressions\&. pathType is a space\-separated list of elements, pointing out a specific list element\&.
.RE
.PP
Note that the tailf:cli\-suppress\-range YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/customRange"
.PP
The "customRange" element is used for specifying that a given list element should support ranges\&. A type matching the range expression must be supplied, as well as a callback to use to determine if a given instance is covered by a given range expression\&. It contains one or more "rangeType" elements and one "callback" element\&.
.PP
Attributes:
.PP
\fIpath\fR (pathType)
.RS 4
The "path" attribute is mandatory\&. It specifies on which path to apply the custom range\&. pathType is a space\-separated list of elements, pointing out a specific list element\&.
.RE
.PP
Note that the tailf:cli\-custom\-range YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/customRange/callback"
.PP
The "callback" element is used for specifying which callback to invoke for checking if a list element instance belongs to a range\&. It contains a "capi" element\&.
.PP
Note that the tailf:cli\-custom\-range\-actionpoint YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/customRange/callback/capi"
.PP
The "capi" element is used for specifying the name of the callback to invoke for checking if a list element instance belongs to a range\&.
.PP
Attributes:
.PP
\fIid\fR (string)
.RS 4
The "id" attribute is optional\&. It specifies a string which is passed to the callback when invoked to check if a value belongs in a range\&. This makes it possible to use the same callback at several locations and still keep track of which point it is invoked from\&.
.RE
.SS "/clispec/$MODE/modifications/customRange/rangeType"
.PP
The "rangeType" element is used for specifying which key element of a list element should support range expressions\&. It is also used for specifying a matching type\&. All range expressions must belong to the specified type, and a valid key element must not be a valid element of this type\&.
.PP
Attributes:
.PP
\fIkey\fR (string)
.RS 4
The "key" attribute is mandatory\&. It specifies which key element of the list that the rangeType applies to\&.
.RE
.PP
\fInamespace\fR (string)
.RS 4
The "namespace" attribute is mandatory\&. It specifies which namespace the type belongs to\&.
.RE
.PP
\fIname\fR (string)
.RS 4
The "name" attribute is mandatory\&. It specifies the name of the range type\&.
.RE
.PP
Note that the tailf:cli\-range\-type YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/allowWildcard"
.PP
The "allowWildcard" element is used for specifying that a given list element should allow wildcard expressions in the show pattern
.PP
Attributes:
.PP
\fIpath\fR (pathType)
.RS 4
The "path" attribute is mandatory\&. It specifies on which path to allow wildcard expressions\&. pathType is a space\-separated list of elements, pointing out a specific list element\&.
.RE
.PP
Note that the tailf:cli\-allow\-wildcard YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/suppressWildcard"
.PP
The "suppressWildcard" element is used for specifying that a given list element should not allow wildcard expressions in the show pattern
.PP
Attributes:
.PP
\fIpath\fR (pathType)
.RS 4
The "path" attribute is mandatory\&. It specifies on which path to suppress wildcard expressions\&. pathType is a space\-separated list of elements, pointing out a specific list element\&.
.RE
.PP
Note that the tailf:cli\-suppress\-wildcard YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/suppressValidationWarningPrompt"
.PP
The "suppressValidationWarningPrompt" element is used for specifying that for a given path a validate warning should not result in a prompt to the user\&. The warning is displayed but without blocking the commit operation\&.
.PP
Attributes:
.PP
\fIpath\fR (pathType)
.RS 4
The "path" attribute is mandatory\&. It specifies on which path to suppress the validation warning prompt\&. pathType is a space\-separated list of elements, pointing out a specific list element\&.
.RE
.PP
Note that the tailf:cli\-suppress\-validate\-warning\-prompt YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/errorMessageRewrite"
.PP
The "errorMessageRewrite" element is used for specifying that a callback should be invoked for possibly rewriting error messages before displaying them\&.
.SS "/clispec/$MODE/modifications/errorMessageRewrite/callback"
.PP
The "callback" element is used for specifying which callback to invoke for rewriting a message\&. It contains a "capi" element\&.
.SS "/clispec/$MODE/modifications/errorMessageRewrite/callback/capi"
.PP
The "capi" element is used for specifying the name of the callback to invoke for rewriting a message\&.
.SS "/clispec/$MODE/modifications/showPathRewrite"
.PP
The "showPathRewrite" element is used for specifying that a callback should be invoked for possibly rewriting the show path before executing a show command\&. The callback is invoked by the builtin show command\&.
.SS "/clispec/$MODE/modifications/showPathRewrite/callback"
.PP
The "callback" element is used for specifying which callback to invoke for rewriting the show path\&. It contains a "capi" element\&.
.SS "/clispec/$MODE/modifications/showPathRewrite/callback/capi"
.PP
The "capi" element is used for specifying the name of the callback to invoke for rewriting the show path\&.
.SS "/clispec/$MODE/modifications/noKeyCompletion"
.PP
The "noKeyCompletion" element tells the CLI to not perform completion for key elements for a given path\&. This is to avoid querying the data provider for all existing keys\&.
.PP
Attributes:
.PP
\fIsrc\fR (pathType)
.RS 4
The "src" attribute is mandatory\&. It specifies which path to make not do completion for\&. pathType is a space\-separated list of elements, pointing out a specific list element\&.
.RE
.PP
Note that the tailf:cli\-no\-key\-completion extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/noMatchCompletion"
.PP
The "noMatchCompletion" element tells the CLI to not provide match completion for a given element path for show commands\&.
.PP
Attributes:
.PP
\fIpath\fR (pathType)
.RS 4
The "path" attribute is mandatory\&. It specifies which path to make not do match completion for\&. pathType is a space\-separated list of elements, pointing out a specific list element\&.
.RE
.PP
Note that the tailf:cli\-no\-match\-completion YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/incompleteShowPath"
.PP
The "incompleteShowPath" element makes it possible to specify that a path to the show command in the C and I\-style CLIs is considered incomplete\&. It can also be used to specify that a minimum number of keys needs to be specified\&.
.PP
Attributes:
.PP
\fIpath\fR (pathType)
.RS 4
The "path" attribute is mandatory\&. It specifies which path to consider incomplete\&. pathType is a space\-separated list of elements, pointing out a specific list element\&.
.RE
.PP
\fIminKeys\fR (positiveInteger)
.RS 4
The "minKeys" attribute is optional\&. For paths leading to a list element it is possible to specify the minimum number of required keys\&.
.RE
.PP
Note that the tailf:cli\-incomplete\-show\-path YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/suppressShowPath"
.PP
The "suppressShowPath" element makes it possible to specify that a path to the show command should not be available\&. This only applies to I\- and C\- style CLI\&.
.PP
Attributes:
.PP
\fIpath\fR (pathType)
.RS 4
The "path" attribute is mandatory\&. It specifies which path to suppress\&. pathType is a space\-separated list of elements, pointing out a specific list element\&.
.RE
.PP
Note that the tailf:cli\-suppress\-show\-path YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/suppressShowMatch"
.PP
The "suppressShowMatch" element makes it possible to specify that a specific completion match (ie a filter match that appear at list element nodes as an alternative to specifying a single instance) to the show command should not be available\&.
.PP
Attributes:
.PP
\fIpath\fR (pathType)
.RS 4
The "path" attribute is mandatory\&. It specifies which path to suppress\&. pathType is a space\-separated list of elements, pointing out a specific list element\&.
.RE
.PP
Note that the tailf:cli\-suppress\-show\-match YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/incompleteCommand"
.PP
The "incompleteCommand" element makes it possible to specify that an auto\-rendered command in C\- and I\-mode should be considered incomplete\&. It can be used to prevent <cr> from appearing in the completion list for optional internal nodes\&.
.PP
Attributes:
.PP
\fIpath\fR (pathType)
.RS 4
The "path" attribute is mandatory\&. It specifies which path to consider incomplete\&. pathType is a space\-separated list of elements, pointing out a specific list element\&.
.RE
.PP
Note that the tailf:cli\-incomplete\-command YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/sequenceCommands"
.PP
The "sequenceCommands" element makes it possible to specify that an auto\-rendered command in C\- and I\-mode should only accept arguments in the same order as they are specified in the YANG module\&. This, in combination with dropElem, can be used to create CLI commands for setting multiple leafs in a container without having to specify the leaf names\&.
.PP
Attributes:
.PP
\fIpath\fR (pathType)
.RS 4
The "path" attribute is mandatory\&. It specifies which path to make into an argument sequence\&. pathType is a space\-separated list of elements, pointing out a specific container element\&.
.RE
.PP
Note that the tailf:cli\-sequence\-commands YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/fullCommand"
.PP
The "fullCommand" element makes it possible to specify that an auto\-rendered command in C\- and I\-mode should be considered full\&. It can be used to prevent further command stacking\&.
.PP
Attributes:
.PP
\fIpath\fR (pathType)
.RS 4
The "path" attribute is mandatory\&. It specifies which path to consider full\&. pathType is a space\-separated list of elements, pointing out a specific list element\&.
.RE
.PP
Note that the tailf:cli\-full\-command YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/fullShowPath"
.PP
The "fullShowPath" element makes it possible to specify that a path to the show command in the C and I\-style CLIs is considered complete\&. No further elements can be added to the path\&.
.PP
Attributes:
.PP
\fIpath\fR (pathType)
.RS 4
The "path" attribute is mandatory\&. It specifies which path to consider complete\&. pathType is a space\-separated list of elements, pointing out a specific list element\&.
.RE
.PP
\fImaxKeys\fR (positiveInteger)
.RS 4
The "maxKeys" attribute is optional\&. For paths leading to a list element it is possible to specify the maximum number of allowed keys\&.
.RE
.PP
Note that the tailf:cli\-full\-show\-path YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/multiValue"
.PP
The "multiValue" element tells the parser for the C\- and I\- style CLIs that a specific leaf element should get its value from the rest of the command line\&. If this modification is used for a given leaf it will not be possible to enter any more leaf values on the same command line\&.
.PP
Attributes:
.PP
\fIsrc\fR (pathType)
.RS 4
The "src" attribute is mandatory\&. It specifies which path to make a multiline input item by default\&. pathType is a space\-separated list of elements, pointing out a specific list element\&.
.RE
.PP
Note that the tailf:cli\-multi\-value YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/enforceTable"
.PP
The "enforceTable" element makes it possible to force the generation of a table for a list element node regardless of whether the table will be too wide or not\&. This applies to the tables generated by the auto\-rendered show commands for config="false" data in the C\- and I\- style CLIs\&.
.PP
Attributes:
.PP
\fIsrc\fR (pathType)
.RS 4
The "src" attribute is mandatory\&. It specifies which path to enforce\&. pathType is a space\-separated list of elements, pointing out a specific list element\&.
.RE
.PP
Note that the tailf:cli\-enforce\-table YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/suppressTable"
.PP
The "suppressTable" element makes it possible to suppress an automatically generated table in the C\- and I\- style CLIs when using the show command\&.
.PP
Attributes:
.PP
\fIsrc\fR (pathType)
.RS 4
The "src" attribute is mandatory\&. It specifies which path to suppress\&. pathType is a space\-separated list of elements, pointing out a specific list element\&.
.RE
.PP
Note that the tailf:cli\-suppress\-table YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/preformatted"
.PP
The "preformatted" element makes it possible to suppress quoting of stats elements when displaying them\&. Newlines will be preserved in strings etc
.PP
Attributes:
.PP
\fIsrc\fR (pathType)
.RS 4
The "src" attribute is mandatory\&. It specifies which path to consider preformatted\&. pathType is a space\-separated list of elements, pointing out a specific list element\&.
.RE
.PP
Note that the tailf:cli\-preformatted YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/exposeKeyName"
.PP
The "exposeKeyName" element makes it possible to force the C\- and I\-style CLIs to expose the key name to the CLI user\&. The user will be required to enter the name of the key and the key name will be displayed when showing the configuration\&.
.PP
Attributes:
.PP
\fIpath\fR (pathType)
.RS 4
The "src" attribute is mandatory\&. It specifies which leaf to expose\&. pathType is a space\-separated list of elements, pointing out a specific list key element\&.
.RE
.PP
Note that the tailf:cli\-expose\-key\-name YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/displayEmptyConfig"
.PP
The "displayEmptyConfig" element makes it possible to tell confd to display empty configuration list elements when displaying stats data in J\-style CLI, provided that the list element has at least one optional config="false" element\&.
.PP
Attributes:
.PP
\fIpath\fR (pathType)
.RS 4
The "path" attribute is mandatory\&. It specifies which path to apply the mod to\&. pathType is a space\-separated list of elements, pointing out a specific list element\&.
.RE
.PP
Note that the tailf:cli\-display\-empty\-config YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/suppressKeyAbbrev"
.PP
The "suppressKeyAbbrev" element makes it possible to suppress the use of abbreviations for specific key elements\&.
.PP
Attributes:
.PP
\fIsrc\fR (pathType)
.RS 4
The "src" attribute is mandatory\&. It specifies which path to suppress\&. pathType is a space\-separated list of elements, pointing out a specific list element\&.
.RE
.PP
Note that the tailf:cli\-suppress\-key\-abbreviation YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/allowKeyAbbrev"
.PP
The "allowKeyAbbrev" element makes it possible to allow the use of abbreviations for specific key elements\&.
.PP
Attributes:
.PP
\fIsrc\fR (pathType)
.RS 4
The "src" attribute is mandatory\&. It specifies which path to suppress\&. pathType is a space\-separated list of elements, pointing out a specific list element\&.
.RE
.PP
Note that the tailf:allow\-key\-abbreviation YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/suppressMode"
.PP
The "suppressMode" element makes it possible to suppress an automatically generated mode in C\- and I\- style CLI\&.
.PP
Attributes:
.PP
\fIsrc\fR (pathType)
.RS 4
The "src" attribute is mandatory\&. It specifies which path to suppress\&. pathType is a space\-separated list of elements, pointing out a specific list element\&.
.RE
.PP
Note that the tailf:cli\-suppress\-mode YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/addMode"
.PP
The "addMode" element makes it possible to create a mode at a non\-list element\&. Only applicable in C\- and I\- style CLI\&.
.PP
Attributes:
.PP
\fIsrc\fR (pathType)
.RS 4
The "src" attribute is mandatory\&. It specifies for which path to create the mode\&. pathType is a space\-separated list of elements, pointing out a specific non\-list, non\-leaf element\&.
.RE
.PP
Note that the tailf:cli\-add\-mode YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/modeName"
.PP
The "modeName" element makes it possible to specify a custom mode name in the C\- and I\- style CLI\&. It contains one of the elements "fixed" or "capi"\&.
.PP
Attributes:
.PP
\fIsrc\fR (pathType)
.RS 4
The "src" attribute is mandatory\&. It specifies for which path the custom mode name should apply\&. pathType is a space\-separated list of elements, pointing out a path to a mode\&.
.RE
.SS "/clispec/$MODE/modifications/modeName/fixed (xs:string)"
.PP
Specifies a fixed mode name\&.
.PP
Note that the tailf:cli\-mode\-name YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/modeName/capi"
.PP
Specifies that the mode name should be calculated through a callback function\&. It contains exactly one "cmdpoint" element\&.
.PP
Note that the tailf:cli\-mode\-name\-actionpoint YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/modeName/capi/cmdpoint (xs:string)"
.PP
Specifies the callpoint name of the mode name function\&.
.SS "/clispec/$MODE/modifications/autocommitDelay"
.PP
The "autocommitDelay" element makes it possible to enable transactions while in a specific submode (or submode of that mode)\&. The modifications performed in that mode will not take effect until the user exits that submode\&.
.PP
Attributes:
.PP
\fIpath\fR (pathType)
.RS 4
The "path" attribute is mandatory\&. It specifies which path to delay autocommit for\&. pathType is a space\-separated list of elements, pointing out a specific non\-list, non\-leaf element\&.
.RE
.PP
Note that the tailf:cli\-delayed\-auto\-commit YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/simpleType"
.PP
The "simpleType" element makes it possible to customize the handling of a type\&. A type is typically attached to each leaf in a YANG module or to command parameters\&. The "simpleType" element makes it possible to customize both builtin and derived types\&. For now the only handling that can be customized is how CLI completion is to be performed\&.
.PP
The "simpleType" element contains a single element "capi"\&.
.PP
Attributes:
.PP
\fInamespace\fR (string)
.RS 4
The "namespace" attribute is mandatory\&. It specifies the namespace URI whereas the type to be modified has been defined\&.
.RE
.PP
\fIname\fR (string)
.RS 4
The "name" attribute is mandatory\&. It specifies the name of the type to be customized
.RE
.SS "/clispec/$MODE/modifications/simpleType/capi"
.PP
Specifies that the simpleType customization should be calculated through a callback function\&. It contains exactly one "completionpoint" element\&.
.SS "/clispec/$MODE/modifications/simpleType/capi/completionpoint (xs:string)"
.PP
Specifies the callpoint name of the completion function\&.
.SS "/clispec/$MODE/modifications/completion"
.PP
The "completion" element makes it possible to customize the completion of a specific path\&.
.PP
The "completion" element contains a single element "capi" enclosed in the "callback" element\&.
.PP
Attributes:
.PP
\fIpath\fR (cmdpathType)
.RS 4
The "path" attribute is mandatory\&. It specifies for which path the completion callback should be applied to\&. cmdpathType is a space\-separated list of commands\&.
.RE
.PP
Note that the tailf:cli\-completion\-actionpoint YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/completion/callback/capi"
.PP
Specifies that the completion customization should be calculated through a callback function\&. It contains exactly one "completionpoint" element\&.
.SS "/clispec/$MODE/modifications/completion/callback/capi/completionpoint (xs:string)"
.PP
Specifies the callpoint name of the completion function\&.
.PP
Attributes:
.PP
\fIid\fR (string)
.RS 4
The "id" attribute is optional\&. It specifies a string which is passed to the callback when invoked\&. This makes it possible to use the same callback at several locations and still keep track of which point it is invoked from\&.
.RE
.SS "/clispec/$MODE/modifications/suppressKeySort"
.PP
The "suppressKeySort" element makes it possible to suppress sorting of key\-values in the completion list\&. Instead the values will be displayed in the same order as they are provided by the data\-provider (external or CDB)\&.
.PP
Attributes:
.PP
\fIpath\fR (pathType)
.RS 4
The "path" attribute is mandatory\&. It specifies which path to not sort\&. pathType is a space\-separated list of elements, pointing out a specific list element\&.
.RE
.PP
Note that the tailf:cli\-suppress\-key\-sort YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/legend (xs:string)"
.PP
The "legend" element makes it possible to add a custom legend to be displayed when before printing a table\&. The legend is specified as a template string\&.
.PP
Attributes:
.PP
\fIpath\fR (cmdpathType)
.RS 4
The "path" attribute is mandatory\&. It specifies for which path the legend should be printed\&. cmdpathType is a space\-separated list of commands\&.
.RE
.PP
Note that the tailf:cli\-legend YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/footer (xs:string)"
.PP
The "footer" element makes it possible to specify a template that will be displayed after printing a table\&.
.PP
Attributes:
.PP
\fIpath\fR (cmdpathType)
.RS 4
The "path" attribute is mandatory\&. It specifies for which path the footer should be printed\&. cmdpathType is a space\-separated list of commands\&.
.RE
.PP
Note that the tailf:cli\-footer YANG extension can be used to the same effect directly in YANG file\&.
.SS "/clispec/$MODE/modifications/help (xs:string)"
.PP
The "help" element makes it possible to add a custom help text to the specified built\-in command\&.
.PP
Attributes:
.PP
\fIsrc\fR (cmdpathType)
.RS 4
The "src" attribute is mandatory\&. It specifies which command to add the text to\&. cmdpathType is a space\-separated list of commands, pointing out a specific sub\-command\&.
.RE
.SS "/clispec/$MODE/modifications/paramhelp (xs:string)"
.PP
The "paramhelp" element makes it possible to add a custom help text to a parameter to a specified built\-in command\&.
.PP
Attributes:
.PP
\fIsrc\fR (cmdpathType)
.RS 4
The "src" attribute is mandatory\&. It specifies which command to add the text to\&. cmdpathType is a space\-separated list of commands, pointing out a specific sub\-command\&.
.RE
.PP
\fInr\fR (positiveInteger)
.RS 4
The "nr" attribute is mandatory\&. It specifies which parameter of the command to add the text to\&.
.RE
.SS "/clispec/$MODE/modifications/typehelp (xs:string)"
.PP
The "typehelp" element makes it possible to add a custom help text for the built\-in primitive types, e\&.g\&. to change the default type name in the CLI\&. For example, to display "<integer>" instead of "<unsignedShort>"\&.
.PP
The built\-in primitive types are: string, atom, normalizedString, boolean, float, decimal, double, hexBinary, base64Binary, anyURI, anySimpleType, QName, NOTATION, token, integer, nonPositiveInteger, negativeInteger, long, int, short, byte, nonNegativeInteger, unsignedLong, positiveInteger, unsignedInt, unsignedShort, unsignedByte, dateTime, date, gYearMonth, gDay, gYear, time, gMonthDay, gMonth, duration, inetAddress, inetAddressIPv4, inetAddressIP, inetAddressIPv6, inetAddressDNS, inetPortNumber, size, MD5DigestString, DES3CBCEncryptedString, AESCFB128EncryptedString, objectRef, bits_type_32, bits_type_64, hexValue, hexList, octetList, Gauge32, Counter32, Counter64, and oid\&.
.PP
Attributes:
.PP
\fItype\fR (xs:Name)
.RS 4
The "type" attribute is mandatory\&. It specifies which primitive type to modify\&.
.RE
.SS "/clispec/$MODE/modifications/info (xs:string)"
.PP
The "info" element makes it possible to add a custom info text to the specified built\-in command\&.
.PP
Attributes:
.PP
\fIsrc\fR (cmdpathType)
.RS 4
The "src" attribute is mandatory\&. It specifies which command to hide\&. cmdpathType is a space\-separated list of commands, pointing out a specific sub\-command\&.
.RE
.SS "/clispec/$MODE/modifications/paraminfo (xs:string)"
.PP
The "paraminfo" element makes it possible to add a custom info text to a parameter to a specified built\-in command\&.
.PP
Attributes:
.PP
\fIsrc\fR (cmdpathType)
.RS 4
The "src" attribute is mandatory\&. It specifies which command to add the text to\&. cmdpathType is a space\-separated list of commands, pointing out a specific sub\-command\&.
.RE
.PP
\fInr\fR (positiveInteger)
.RS 4
The "nr" attribute is mandatory\&. It specifies which parameter of the command to add the text to\&.
.RE
.SS "/clispec/$MODE/modifications/timeout (xs:integer|infinity)"
.PP
The "timeout" element makes it possible to add a custom command timeout (in seconds) to the specified built\-in command\&.
.PP
Attributes:
.PP
\fIsrc\fR (cmdpathType)
.RS 4
The "src" attribute is mandatory\&. It specifies which command to add the timeout to\&. cmdpathType is a space\-separated list of commands, pointing out a specific sub\-command\&.
.RE
.SS "/clispec/$MODE/modifications/hide"
.PP
The "hide" element makes it possible to hide a built\-in command
.PP
Attributes:
.PP
\fIsrc\fR (cmdpathType)
.RS 4
The "src" attribute is mandatory\&. It specifies which command to hide\&. cmdpathType is a space\-separated list of commands, pointing out a specific sub\-command\&.
.sp
An example:
.sp
.if n \{\
.RS 4
.\}
.nf
        <modifications>
        <hide src="file show"/>
        </modifications>
        
.fi
.if n \{\
.RE
.\}
.RE
.SS "/clispec/$MODE/modifications/hideGroup"
.PP
The "hideGroup" element makes it possible to hide a built\-in command under a hide group\&.
.PP
Attributes:
.PP
\fIsrc\fR (cmdpathType)
.RS 4
The "src" attribute is mandatory\&. It specifies which command to hide\&. cmdpathType is a space\-separated list of commands, pointing out a specific sub\-command\&.
.RE
.PP
\fIname\fR (xs:string)
.RS 4
The "name" attribute is mandatory\&. It specifies which hide group to hide the command\&.
.sp
An example:
.sp
.if n \{\
.RS 4
.\}
.nf
<modifications>
  <hideGroup src="file show" name="debug"/>
</modifications>
.fi
.if n \{\
.RE
.\}
.RE
.SS "/clispec/$MODE/modifications/submodeCommand"
.PP
The "submodeCommand" element makes it possible to make a command visible in the completion lists of all submodes\&.
.PP
Attributes:
.PP
\fIsrc\fR (cmdpathType)
.RS 4
The "src" attribute is mandatory\&. It specifies which command to make available\&. cmdpathType is a space\-separated list of commands, pointing out a specific sub\-command\&.
.sp
An example:
.sp
.if n \{\
.RS 4
.\}
.nf
<modifications>
  <submodeCommand src="clear"/>
</modifications>
.fi
.if n \{\
.RE
.\}
.RE
.SS "/clispec/$MODE/modifications/confirmText (xs:string)"
.PP
The "confirmText" element makes it possible to add a confirmation text to the specified command, i\&.e\&. the CLI user is prompted whenever this command is executed\&. The prompt to be used is given as a body to the element as seen in
confd\-light\&.cli above\&. The valid answers are "yes" and "no" \- the text " [yes, no]" will automatically be added to the given confirmation text\&.
.PP
Attributes:
.PP
\fIsrc\fR (cmdpathType)
.RS 4
The "src" attribute is mandatory\&. It specifies which command to add a confirmation prompt to\&. cmdpathType is a space\-separated list of commands, pointing out a specific sub\-command\&.
.RE
.PP
\fIdefaultOption\fR (yes|no)
.RS 4
The "defaultOption" attribute is optional\&. It makes it possible to customize if "yes" or "no" should be the default option, i\&.e\&. if the user just hits ENTER\&. If this element is not defined it defaults to whatever is specified by the /clispec/$MODE/modifications/defaultConfirmOption element\&.
.RE
.SS "/clispec/$MODE/modifications/defaultConfirmOption (yes|no)"
.PP
The "defaultConfirmOption" element makes it possible to customize if "yes" or "no" should be the default option, i\&.e\&. if the user just hits ENTER, for the confirmation text added by the "confirmText" element\&.
.PP
If this element is not defined it defaults to "yes"\&.
.PP
This element affects both /clispec/$MODE/modifications/confirmText and /clispec/$MODE/cmd/confirmText if they have not defined their "defaultOption" attributes\&.
.SS "/clispec/$MODE/modifications/keymap"
.PP
The "keymap" element makes it possible to modify the key bindings in the command line editor\&.
.PP
Attributes:
.PP
\fIkey\fR (xs:string)
.RS 4
The "key" attribute is mandatory\&. It specifies which sequence of keystrokes to modify\&.
.RE
.PP
\fIaction\fR (keymapActionType)
.RS 4
The "action" attribute is mandatory\&. It specifies what should happen when the specified key sequence is executed\&. Possible values are: "unset", "new", "exist", "start_of_line", "back", "abort", "tab", "delete_forward", "delete_forward_no_eof", "end_of_line", "forward", "kill_rest", "redraw", "redraw_clear", "newline", "insert(chars)", "history_next", "history_prev", "isearch_back", "transpose", "kill_line", "quote", "word_delete_back", "yank", "end_mode", "delete", "word_delete_forward", "beginning_of_line", "delete", "end_of_line", "word_forward", "word_back", "end_of_line", "beginning_of_line", "word_back", "word_forward", "word_capitalize", "word_lowercase", "word_uppercase", "word_delete_back", "word_delete_forward", "multiline_mode", "yank_killring", and "quot"\&. To remove a default binding use the action "remove_binding"\&.
.sp
The default keymap is:
.sp
.if n \{\
.RS 4
.\}
.nf
      <keymap key="\e^A" action="start_of_line"/>
      <keymap key="\e^B" action="back"/>
      <keymap key="\e^C" action="abort"/>
      <keymap key="\e^D" action="delete_forward"/>
      <keymap key="\e^E" action="end_of_line"/>
      <keymap key="\e^F" action="forward"/>
      <keymap key="\e^J" action="newline"/>
      <keymap key="\e^K" action="kill_rest"/>
      <keymap key="\e^L" action="redraw_clear"/>
      <keymap key="\e^M" action="newline"/>
      <keymap key="\e^N" action="history_next"/>
      <keymap key="\e^P" action="history_prev"/>
      <keymap key="\e^R" action="isearch_back"/>
      <keymap key="\e^T" action="transpose"/>
      <keymap key="\e^U" action="kill_line"/>
      <keymap key="\e^V" action="quote"/>
      <keymap key="\e^W" action="word_delete_back"/>
      <keymap key="\e^X" action="kill_line"/>
      <keymap key="\e^Y" action="yank"/>
      <keymap key="\e^Z" action="end_mode"/>
      <keymap key="\ed" action="delete"/>
      <keymap key="\et" action="tab"/>
      <keymap key="\eb" action="delete"/>
      <keymap key="\eed" action="word_delete_forward"/>
      <keymap key="\ee[Z" action="tab"/>
      <keymap key="\ee[A" action="history_prev"/>
      <keymap key="\ee[1~" action="beginning_of_line"/>
      <keymap key="\ee[3~" action="delete"/>
      <keymap key="\ee[4~" action="end_of_line"/>
      <keymap key="\eeOA" action="history_prev"/>
      <keymap key="\eeOB" action="history_next"/>
      <keymap key="\eeOC" action="forward"/>
      <keymap key="\eeOD" action="back"/>
      <keymap key="\eeOM" action="newline"/>
      <keymap key="\eeOp" action="insert(0)"/>
      <keymap key="\eeOq" action="insert(1)"/>
      <keymap key="\eeOr" action="insert(2)"/>
      <keymap key="\eeOs" action="insert(3)"/>
      <keymap key="\eeOt" action="insert(4)"/>
      <keymap key="\eeOu" action="insert(5)"/>
      <keymap key="\eeOv" action="insert(6)"/>
      <keymap key="\eeOw" action="insert(7)"/>
      <keymap key="\eeOx" action="insert(8)"/>
      <keymap key="\eeOy" action="insert(9)"/>
      <keymap key="\eeOm" action="insert(\-)"/>
      <keymap key="\eeOl" action="insert(*)"/>
      <keymap key="\eeOn" action="insert(\&.)"/>
      <keymap key="\ee[5C" action="word_forward"/>
      <keymap key="\ee[5D" action="word_back"/>
      <keymap key="\ee[1;5C" action="word_forward"/>
      <keymap key="\ee[1;5D" action="word_back"/>
      <keymap key="\ee[B" action="history_next"/>
      <keymap key="\ee[C" action="forward"/>
      <keymap key="\ee[D" action="back"/>
      <keymap key="\ee[F" action="end_of_line"/>
      <keymap key="\ee[H" action="beginning_of_line"/>
      <keymap key="\eeb" action="word_back"/>
      <keymap key="\eef" action="word_forward"/>
      <keymap key="\eec" action="word_capitalize"/>
      <keymap key="\eel" action="word_lowercase"/>
      <keymap key="\eeu" action="word_uppercase"/>
      <keymap key="\ee\eb" action="word_delete_back"/>
      <keymap key="\ee\ed" action="word_delete_back"/>
      <keymap key="\eed" action="word_delete_forward"/>
      <keymap key="\eem" action="multiline_mode"/>
      <keymap key="\eey" action="yank_killring"/>
      <keymap key="\eeq" action="quote"/>
.fi
.if n \{\
.RE
.\}
.sp
The default keymap for I\-style differs with the following mapping:
.sp
.if n \{\
.RS 4
.\}
.nf
  <keymap key="\e^D" action="delete_forward_no_eof"/>
.fi
.if n \{\
.RE
.\}
.RE
.SS "/clispec/$MODE/show"
.PP
The "show" element overrides the built\-in show command, in the C\-style CLI, for a givenpath defined by the "path" attribute\&. It contains (in order) zero or one "callback" elements, and zero or one "options" elements\&.
.PP
Attributes:
.PP
\fIpath\fR (showpathType) []
.RS 4
The "path" attribute is required\&. It specifies for which path the command should be invoked\&.
.sp
An example:
.sp
.if n \{\
.RS 4
.\}
.nf
<show path="aaa authentication users user">
  <callback>
    <exec>
      <osCommand>\&./show_aaa_auth\&.sh</osCommand>
    </exec>
  </callback>
</show>
.fi
.if n \{\
.RE
.\}
.RE
.SS "/clispec/$MODE/show/callback"
.PP
The "callback" element specifies how the command is implemented, e\&.g\&. as a OS executable or a CAPI callback\&. It contains one of the elements "capi", and "exec"\&.
.SS "/clispec/$MODE/show/callback/mode"
.PP
The "mode" element specifies that the command is used for entering a custom mode\&. It contains one "name" and one "datastore" element\&.
.PP
An example:
.sp
.if n \{\
.RS 4
.\}
.nf
<callback>
  <mode>
    <name>debug</name>
    <datastore>private</name>
  </mode>
</callback>
.fi
.if n \{\
.RE
.\}
.SS "/clispec/$MODE/show/callback/mode/name (xs:NCName)"
.PP
The "name" element specifies the name of the custom mode\&. For this to work, a custom mode with that name must be declared\&.
.SS "/clispec/$MODE/show/callback/mode/datastore\fI[private]\fR"
.PP
The "datastore" element must be one of "private", "shared" and "exclusive"\&. It is ignored for operational custom modes and when entering a configure mode from within another configure mode\&. It is only used when going from operational mode to configure mode\&.
.SS "/clispec/$MODE/show/callback/capi"
.PP
The "capi" element specifies that the command is implemented using
C\-API
using the same API as for actions\&. It contains one "cmdpoint" element and one or zero "args" element\&.
.PP
An example:
.sp
.if n \{\
.RS 4
.\}
.nf
<callback>
  <capi>
    <cmdpoint>adduser</cmdpoint>
  </capi>
</callback>
.fi
.if n \{\
.RE
.\}
.SS "/clispec/$MODE/show/callback/capi/args (argsType)"
.PP
The "args" element specifies the arguments to use when executing the command specified by the "callpoint" element\&. argsType is a space\-separated list of argument strings\&.
.PP
The string may contain a number of built\-in variables which are expanded on execution\&. The built\-in variables are: "cwd", "user", "groups", "ip", "maapi", "uid", "gid", "tty", "ssh_connection", "opaque", "path", "cpath", "ipath" and "licounter"\&. In addition the variables "spath" and "ispath" are available when a command is executed from a show path\&. For example:
.sp
.if n \{\
.RS 4
.\}
.nf
<args>$(user)</args>
.fi
.if n \{\
.RE
.\}
.PP
Will expand to the username\&.
.SS "/clispec/$MODE/show/callback/capi/cmdpoint (xs:NCName)"
.PP
The "cmdpoint" element specifies the name of the
C\-API
action to be called\&. For this to work, a actionpoint must be registered with the ConfD daemon at startup\&.
.SS "/clispec/$MODE/show/callback/exec"
.PP
The "exec" element specifies how the command is implemented using an executable or a shell script\&. It contains (in order) one "osCommand" element, zero or one "args" elements and zero or one "options" elements\&.
.PP
An example:
.sp
.if n \{\
.RS 4
.\}
.nf
<callback>
  <exec>
    <osCommand>cp</osCommand>
    <options>
      <uid><phrase condition="confd">confd</phrase><phrase condition="ncs">ncs</phrase></uid>
      <wd>/var/tmp</wd>
      \&.\&.\&.
    </options>
  </exec>
</callback>
.fi
.if n \{\
.RE
.\}
.SS "/clispec/$MODE/show/callback/exec/osCommand (xs:token)"
.PP
The "osCommand" element specifies the path to the executable or shell script to be called\&. If the command is in the $PATH (as specified when we start the ConfD daemon) the path may just be the name of the command\&.
.PP
The "osCommand" and "args" for "show" differs a bit from the ones for "cmd"\&. For "show" there are a few built\-in arguments that always are given to the "osCommand"\&. These are appended to "args"\&. The built\-in arguments are "0", the keypath (ispath) and an optional filter\&. Like this: "0 /prefix:keypath *"\&.
.PP
The command is not paginated by default in the CLI and will only do so if it is piped to more\&.
.sp
.if n \{\
.RS 4
.\}
.nf
    joe@io> example_os_command | more
  
.fi
.if n \{\
.RE
.\}
.PP
The command is invoked as if it had been executed by exec(3), i\&.e\&. not in a shell environment such as "/bin/sh \-c \&.\&.\&."\&.
.SS "/clispec/$MODE/show/callback/exec/args (argsType)"
.PP
The "args" element specifies additional arguments to use when executing the command specified by the "osCommand" element\&. The "args" arguments are prepended to the mandatory ones listed in "osCommand"\&. argsType is a space\-separated list of argument strings\&.
.PP
The string may contain a number of built\-in variables which are expanded on execution\&. The built\-in variables are: "cwd", "user", "groups", "ip", "maapi", "uid", "gid", "tty", "ssh_connection", "opaque", "path", "cpath", "ipath" and "licounter"\&. In addition the variables "spath" and "ispath" are available when a command is executed from a show path\&. For example:
.sp
.if n \{\
.RS 4
.\}
.nf
<args>$(user)</args>
.fi
.if n \{\
.RE
.\}
.PP
Will expand to the username and the three built\-in arguments\&. For example: "admin 0 /prefix:keypath *"\&.
.SS "/clispec/$MODE/show/callback/exec/options"
.PP
The "options" element specifies how the command is be executed\&. It contains (in any order) zero or one "uid" elements, zero or one "gid" elements, zero or one "wd" elements, zero or one "batch" elements, zero or one "pty" element, zero or one of "interrupt" elements, zero or one of "noInput", zero or one "raw" elements, and zero or one "ignoreExitValue" elements\&.
.SS "/clispec/$MODE/show/callback/exec/options/uid (idType) [confd]"
.PP
The "uid" element specifies which user id to use when executing the command\&. Possible values are:
.PP
\fIconfd\fR (default)
.RS 4
The command is run as the same user id as the ConfD daemon\&.
.RE
.PP
\fIuser\fR
.RS 4
The command is run as the same user id as the user logged in to the CLI, i\&.e\&. we have to make sure that this user id exists as an actual user id on the device\&.
.RE
.PP
\fIroot\fR
.RS 4
The command is run as root\&.
.RE
.PP
\fI<uid>\fR (the numerical user \fI<uid>\fR)
.RS 4
The command is run as the user id <uid>\&.
.sp
\fINote:\fR
If uid is set to either "user", "root" or "<uid>" the the ConfD daemon must have been started as root (or setuid), or the showptywrapper must have setuid root permissions\&.
.RE
.SS "/clispec/$MODE/show/callback/exec/options/gid (idType) [confd]"
.PP
The "gid" element specifies which group id to use when executing the command\&. Possible values are:
.PP
\fIconfd\fR (default)
.RS 4
The command is run as the same group id as the ConfD daemon\&.
.RE
.PP
\fIuser\fR
.RS 4
The command is run as the same group id as the user logged in to the CLI, i\&.e\&. we have to make sure that this group id exists as an actual group on the device\&.
.RE
.PP
\fIroot\fR
.RS 4
The command is run as root\&.
.RE
.PP
\fI<gid>\fR (the numerical group \fI<gid>\fR)
.RS 4
The command is run as the group id <gid>\&.
.sp
\fINote:\fR
If gid is set to either "user", "root" or "<gid>" the the ConfD daemon must have been started as root (or setuid), or the showptywrapper must have setuid root permissions\&.
.RE
.SS "/clispec/$MODE/show/callback/exec/options/wd (xs:token)"
.PP
The "wd" element specifies which working directory to use when executing the command\&. If not given, the command is executed from the location of the CLI\&.
.SS "/clispec/$MODE/show/callback/exec/options/pty (xs:boolean)"
.PP
The "pty" element specifies weather a pty should be allocated when executing the command\&. The default is to allocate a pty for operational and configure osCommands, but not for osCommands executing as a pipe command\&. This behavior can be overridden with this parameter\&.
.SS "/clispec/$MODE/show/callback/exec/options/interrupt (interruptType) [sigkill]"
.PP
The "interrupt" element specifies what should happen when the user enters ctrl\-c in the CLI\&. Possible values are:
.PP
\fIsigkill\fR (default)
.RS 4
The command is terminated by sending the sigkill signal\&.
.RE
.PP
\fIsigint\fR
.RS 4
The command is interrupted by the sigint signal\&.
.RE
.PP
\fIsigterm\fR
.RS 4
The command is interrupted by the sigterm signal\&.
.RE
.PP
\fIctrlc\fR
.RS 4
The command is sent the ctrl\-c character which is interpreted by the pty\&.
.RE
.SS "/clispec/$MODE/show/callback/exec/options/ignoreExitValue"
.PP
The "ignoreExitValue" element specifies that the CLI engine should ignore the fact that the command returns a non\-zero value\&. Normally it signals an error on stdout if a non\-zero value is returned\&.
.SS "/clispec/$MODE/show/callback/exec/options/raw"
.PP
The "raw" element specifies that the CLI engine should set the pty in raw mode when executing the command\&. This prevents normal output processing like converting \en to \en\er\&.
.SS "/clispec/$MODE/show/callback/exec/options/globalNoDuplicate (xs:token)"
.PP
The "globalNoDuplicate" element specifies that only one instance with the same name can be run at any one time in the system\&. The command can be started either from the CLI, the Web UI or through NETCONF\&.
.SS "/clispec/$MODE/show/callback/exec/options/noInput (xs:token)"
.PP
The "noInput" element specifies that the command should not grab the input stream and consume freely from that\&. This option should be used if the command should not consume input characters\&. If not used then the command will eath all data from the input stream and cut\-and\-paste may not work as intended\&.
.SS "/clispec/$MODE/show/options"
.PP
The "options" element specifies under what circumstances the CLI command should execute\&. It contains (in any order) zero or one "notInterruptible" elements, zero or one of "displayWhen" elements, and zero or one "paginate" elements\&.
.SS "/clispec/$MODE/show/options/notInterruptible"
.PP
The "notInterruptible" element disables <ctrl\-c> and the execution of the CLI command can thus not be interrupted\&.
.SS "/clispec/$MODE/show/options/paginate"
.PP
The "paginate" element enables a filter for paging through CLI command output text one screen at a time\&.
.SS "/clispec/$MODE/show/options/displayWhen"
.PP
The "displayWhen" element can be used to add a displayWhen xpath condition to a command\&.
.PP
Attributes:
.PP
\fIexpr\fR (xpath expression)
.RS 4
The "expr" attribute is mandatory\&. It specifies an xpath expression\&. If the expression evaluates to true then the command is available, otherwise not\&.
.RE
.PP
\fIctx\fR (path)
.RS 4
The "ctx" attribute is optional\&. If not specified the current editpath/mode\-path is used as context node for the xpath evaluation\&. Note that the xpath expression will automatically evaluate to false if a display when expression is used for a top\-level command and no ctx is specified\&. The path may contain variables defined in the dict\&.
.RE
.SS "/clispec/operationalMode/start"
.PP
The "start" command is executed when the CLI is started\&. It can be used to, for example, remind the user to change an expired password\&. It contains (in order) zero or one "callback" elements, and zero or one "options" elements\&.
.PP
This element must occur after the <modifications> section and before any <cmd> entries\&.
.PP
An example:
.sp
.if n \{\
.RS 4
.\}
.nf
<start>
  <callback>
    <exec>
      <osCommand>\&./startup\&.sh</osCommand>
    </exec>
  </callback>
</start>
.fi
.if n \{\
.RE
.\}
.SS "/clispec/operationalMode/start/callback"
.PP
The "callback" element specifies how the command is implemented, e\&.g\&. as a OS executable or an API callback\&. It contains one of the elements "capi", and "exec"\&.
.SS "/clispec/operationalMode/start/callback/capi"
.PP
The "capi" element specifies that the command is implemented using
C\-API
using the same API as for actions\&. It contains one "cmdpoint" element\&.
.PP
An example:
.sp
.if n \{\
.RS 4
.\}
.nf
<callback>
  <capi>
    <cmdpoint>adduser</cmdpoint>
  </capi>
</callback>
.fi
.if n \{\
.RE
.\}
.SS "/clispec/operationalMode/start/callback/capi/cmdpoint (xs:NCName)"
.PP
The "cmdpoint" element specifies the name of the
C\-API
action to be called\&. For this to work, a actionpoint must be registered with the ConfD daemon at startup\&.
.SS "/clispec/operationalMode/start/callback/exec"
.PP
The "exec" element specifies how the command is implemented using an executable or a shell script\&. It contains (in order) one "osCommand" element, zero or one "args" elements and zero or one "options" elements\&.
.PP
An example:
.sp
.if n \{\
.RS 4
.\}
.nf
<callback>
  <exec>
    <osCommand>cp</osCommand>
    <options>
      <uid>confd</uid>
      <wd>/var/tmp</wd>
      \&.\&.\&.
    </options>
  </exec>
</callback>
.fi
.if n \{\
.RE
.\}
.SS "/clispec/operationalMode/start/callback/exec/osCommand (xs:token)"
.PP
The "osCommand" element specifies the path to the executable or shell script to be called\&. If the command is in the $PATH (as specified when we start the ConfD daemon) the path may just be the name of the command\&.
.PP
The command is invoked as if it had been executed by exec(3), i\&.e\&. not in a shell environment such as "/bin/sh \-c \&.\&.\&."\&.
.SS "/clispec/operationalMode/start/callback/exec/args (argsType)"
.PP
The "args" element specifies the arguments to use when executing the command specified by the "osCommand" element\&. argsType is a space\-separated list of argument strings\&. The built\-in variables are: "cwd", "user", "groups", "ip", "maapi", "uid", "gid", "tty", "ssh_connection", "opaque", "path", "cpath", "ipath" and "licounter"\&. In addition the variables "spath" and "ispath" are available when a command is executed from a show path\&. For example:
.sp
.if n \{\
.RS 4
.\}
.nf
<args>$(user)</args>
.fi
.if n \{\
.RE
.\}
.PP
Will expand to the username\&.
.SS "/clispec/operationalMode/start/callback/exec/options"
.PP
The "options" element specifies how the command is be executed\&. It contains (in any order) zero or one "uid" elements, zero or one "gid" elements, zero or one "wd" elements, zero or one "batch" elements, zero or one of "interrupt" elements, and zero or one "ignoreExitValue" elements\&.
.SS "/clispec/operationalMode/start/callback/exec/options/uid (idType) [confd]"
.PP
The "uid" element specifies which user id to use when executing the command\&. Possible values are:
.PP
\fIconfd\fR (default)
.RS 4
The command is run as the same user id as the ConfD daemon\&.
.RE
.PP
\fIuser\fR
.RS 4
The command is run as the same user id as the user logged in to the CLI, i\&.e\&. we have to make sure that this user id exists as an actual user id on the device\&.
.RE
.PP
\fIroot\fR
.RS 4
The command is run as root\&.
.RE
.PP
\fI<uid>\fR (the numerical user \fI<uid>\fR)
.RS 4
The command is run as the user id <uid>\&.
.sp
\fINote:\fR
If uid is set to either "user", "root" or "<uid>" the the ConfD daemon must have been started as root (or setuid), or the startptywrapper must have setuid root permissions\&.
.RE
.SS "/clispec/operationalMode/start/callback/exec/options/gid (idType) [confd]"
.PP
The "gid" element specifies which group id to use when executing the command\&. Possible values are:
.PP
\fIconfd\fR (default)
.RS 4
The command is run as the same group id as the ConfD daemon\&.
.RE
.PP
\fIuser\fR
.RS 4
The command is run as the same group id as the user logged in to the CLI, i\&.e\&. we have to make sure that this group id exists as an actual group on the device\&.
.RE
.PP
\fIroot\fR
.RS 4
The command is run as root\&.
.RE
.PP
\fI<gid>\fR (the numerical group \fI<gid>\fR)
.RS 4
The command is run as the group id <gid>\&.
.sp
\fINote:\fR
If gid is set to either "user", "root" or "<gid>" the the ConfD daemon must have been started as root (or setuid), or the startptywrapper must have setuid root permissions\&.
.RE
.SS "/clispec/operationalMode/start/callback/exec/options/wd (xs:token)"
.PP
The "wd" element specifies which working directory to use when executing the command\&. If not given, the command is executed from the location of the CLI\&.
.SS "/clispec/operationalMode/start/callback/exec/options/globalNoDuplicate (xs:token)"
.PP
The "globalNoDuplicate" element specifies that only one instance with the same name can be run at any one time in the system\&. The command can be started either from the CLI, the Web UI or through NETCONF\&.
.SS "/clispec/operationalMode/start/callback/exec/options/interrupt (interruptType) [sigkill]"
.PP
The "interrupt" element specifies what should happen when the user enters ctrl\-c in the CLI\&. Possible values are:
.PP
\fIsigkill\fR (default)
.RS 4
The command is terminated by sending the sigkill signal\&.
.RE
.PP
\fIsigint\fR
.RS 4
The command is interrupted by the sigint signal\&.
.RE
.PP
\fIsigterm\fR
.RS 4
The command is interrupted by the sigterm signal\&.
.RE
.PP
\fIctrlc\fR
.RS 4
The command is sent the ctrl\-c character which is interpreted by the pty\&.
.RE
.SS "/clispec/operationalMode/start/callback/exec/options/ignoreExitValue(xs:boolean) [false]"
.PP
The "ignoreExitValue" element specifies if the CLI engine should ignore the fact that the command returns a non\-zero value\&. Normally it signals an error on stdout if a non\-zero value is returned\&.
.SS "/clispec/operationalMode/start/options"
.PP
The "options" element specifies under what circumstances the CLI command should execute\&. It contains (in any order) zero or one "notInterruptible" elements, and zero or one "paginate" elements\&.
.SS "/clispec/operationalMode/start/options/notInterruptible"
.PP
The "notInterruptible" element disables <ctrl\-c> and the execution of the CLI command can thus not be interrupted\&.
.SS "/clispec/operationalMode/start/options/paginate"
.PP
The "paginate" element enables a filter for paging through CLI command output text one screen at a time\&.
.SS "/clispec/$MODE/cmd"
.PP
The "cmd" element adds a new command to the CLI hierarchy as defined by its "mount" and "mode" attributes\&. It contains (in order) one "info" element, one "help" element, zero or one "confirmText" element, zero or one "callback" elements, zero or one "params" elements, zero or one "options" elements and finally zero or more "cmd" elements (recursively)\&.
.PP
Attributes:
.PP
\fIname\fR (xs:NCName)
.RS 4
The "name" attribute is mandatory\&. It specifies the name of the command\&.
.RE
.PP
\fImode\fR (cmdpathType) []
.RS 4
The "mode" attribute is optional\&. It specifies that the command should be mounted in a specific submode\&. The attribute is only applicable in the C\- and I\-style CLIs\&. If no "mode" attribute is given the command is mounted in the topmost mode\&.
.RE
.PP
\fIextend\fR (xs:boolean) [false]
.RS 4
The "extend" attribute is optional\&. It specifies that the command should be mounted on top of an existing command, ie with the exact same name as an existing command but with different parameters\&. Which command is executed depends on which parameters are supplied when the command is invoked\&. This can be used to overlay an existing command\&.
.RE
.PP
\fImount\fR (cmdpathType) []
.RS 4
The "mount" attribute is optional\&. It specifies where in the command hierarchy of built\-in commands this command should be mounted\&. If no mount attribute is given, or if it is empty (""), the command is mounted on the top\-level of the CLI hierarchy\&.
.sp
An example:
.sp
.if n \{\
.RS 4
.\}
.nf
<cmd name="copy" mount="file">
  <info>Copy a file</info>
  <help>Copy a file from in the file system\&.</help>
  <callback>
    <exec>
      <osCommand>cp</osCommand>
      <options>
        <uid>confd</uid>
      </options>
    </exec>
  </callback>
  <params>
    <param>
      <type><file/></type>
      <info>&amp;lt;source file&amp;gt;</info>
    </param>
    <param>
      <type><file/></type>
      <info>&amp;lt;destination&amp;gt;</info>
    </param>
  </params>

  <cmd \&.\&.\&.>
    \&.\&.\&.
    <cmd \&.\&.\&.>
      \&.\&.\&.
    </cmd>
  </cmd>

  <cmd \&.\&.\&.>
    \&.\&.\&.
  </cmd>
</cmd>
.fi
.if n \{\
.RE
.\}
.RE
.SS "/clispec/$MODE/cmd/info (xs:string)"
.PP
The "info" element is a single text line describing the command\&.
.PP
An example:
.sp
.if n \{\
.RS 4
.\}
.nf
<cmd name="start">
  <info>Start displaying the system log or trace a file</info>
  \&.\&.\&.
.fi
.if n \{\
.RE
.\}
.PP
and when we do the following in the CLI we get:
.sp
.if n \{\
.RS 4
.\}
.nf
joe@xev> monitor st<TAB>
Possible completions:
  start \- Start displaying the system log or trace a file
  stop  \- Stop displaying the system log or trace a file
joe@xev> monitor st
.fi
.if n \{\
.RE
.\}
.SS "/clispec/$MODE/cmd/help (xs:string)"
.PP
The "help" element is a multi\-line text string describing the command\&. This text is shown when we use the "help" command\&.
.PP
An example:
.sp
.if n \{\
.RS 4
.\}
.nf
joe@xev> help monitor start
Help for command: monitor start
Start displaying the system log or trace a file in the background\&.
We can abort the logging using the "monitor stop" command\&.
joe@xev>
.fi
.if n \{\
.RE
.\}
.SS "/clispec/$MODE/cmd/timeout (xs:integer|infinity)"
.PP
The "timeout" element is a timeout for the command in seconds\&. Default is infinity\&.
.SS "/clispec/$MODE/cmd/confirmText"
.PP
See /clispec/$MODE/modifications/confirmText
.SS "/clispec/$MODE/cmd/callback"
.PP
The "callback" element specifies how the command is implemented, e\&.g\&. as a OS executable or a CAPI callback\&. It contains one of the elements "capi", "exec", "table" or "execStop"\&.
.PP
\fINote:\fR
A command which has a callback defined may not have recursive sub\-commands\&. Likewise, a command which has recursive sub\-commands may not have a callback defined\&. A command without sub\-commands must have a callback defined\&.
.SS "/clispec/$MODE/cmd/callback/table"
.PP
The "table" element specifies that the command should display parts of the configuration in the form of a table\&.
.PP
An example:
.sp
.if n \{\
.RS 4
.\}
.nf
<callback>
  <table>
    <root>/all:config/hosts/host</root>
    <item>
      <width>20</width>
      <header>NAME</header>
      <path>name</path>
      <align>lefg</align>
    </item>
    <item>
      <header>DOMAIN</header>
      <path>domain</path>
    </item>
    <item>
      <header>IP</header>
      <path>interfaces/interface/ip</path>
      <align>right</align>
    </item>
  </table>
</callback>
.fi
.if n \{\
.RE
.\}
.SS "/clispec/$MODE/cmd/callback/table/root (xs:string)"
.PP
Should be a path to a list element\&. All item paths in the table are relative to this path\&.
.SS "/clispec/$MODE/cmd/callback/table/legend (xs:string)"
.PP
Should be a legend template to display before showing the table\&.
.SS "/clispec/$MODE/cmd/callback/table/footer (xs:string)"
.PP
Should be a footer template to display after showing the table\&.
.SS "/clispec/$MODE/cmd/callback/table/item"
.PP
Specifies a column in the table\&. It contains a "header" element and a "path" element, and optionally a "width" element\&.
.SS "/clispec/$MODE/cmd/callback/table/item/header (xs:string)"
.PP
Header of this column in the table\&.
.SS "/clispec/$MODE/cmd/callback/table/item/path (xs:string)"
.PP
Path to the element in this column\&.
.SS "/clispec/$MODE/cmd/callback/table/item/width (xs:integer)"
.PP
The width in characters of this column\&.
.SS "/clispec/$MODE/cmd/callback/table/item/align (left|right|center)"
.PP
The data alignment of this column\&.
.SS "/clispec/$MODE/cmd/callback/capi"
.PP
The "capi" element specifies that the command is implemented using
C\-API
using the same API as for actions\&. It contains one "cmdpoint" element\&.
.PP
An example:
.sp
.if n \{\
.RS 4
.\}
.nf
<callback>
  <capi>
    <cmdpoint>adduser</cmdpoint>
  </capi>
</callback>
.fi
.if n \{\
.RE
.\}
.SS "/clispec/$MODE/cmd/callback/capi/cmdpoint (xs:NCName)"
.PP
The "cmdpoint" element specifies the name of the
C\-API
action to be called\&. For this to work, a actionpoint must be registered with the ConfD daemon at startup\&.
.SS "/clispec/$MODE/cmd/callback/exec"
.PP
The "exec" element specifies how the command is implemented using an executable or a shell script\&. It contains (in order) one "osCommand" element, zero or one "args" elements and zero or one "options" elements\&.
.PP
An example:
.sp
.if n \{\
.RS 4
.\}
.nf
<callback>
  <exec>
    <osCommand>cp</osCommand>
    <options>
      <uid>confd</uid>
      <wd>/var/tmp</wd>
      \&.\&.\&.
    </options>
  </exec>
</callback>
.fi
.if n \{\
.RE
.\}
.SS "/clispec/$MODE/cmd/callback/exec/osCommand (xs:token)"
.PP
The "osCommand" element specifies the path to the executable or shell script to be called\&. If the command is in the $PATH (as specified when we start the ConfD daemon) the path may just be the name of the command\&.
.PP
The command is invoked as if it had been executed by exec(3), i\&.e\&. not in a shell environment such as "/bin/sh \-c \&.\&.\&."\&.
.SS "/clispec/$MODE/cmd/callback/exec/args (argsType)"
.PP
The "args" element specifies the arguments to use when executing the command specified by the "osCommand" element\&. argsType is a space\-separated list of argument strings\&. The built\-in variables are: "cwd", "user", "groups", "ip", "maapi", "uid", "gid", "tty", "ssh_connection", "opaque", "path", "cpath", "ipath" and "licounter"\&. The variable "pipecmd_XYZ" can be used to determine whether a certain builtin pipe command has been run together with the command\&. Here XYZ is the name of the pipe command\&. An example of such a variable is "pipecmd_include"\&. In addition the variables "spath" and "ispath" are available when a command is executed from a show path\&. For example:
.sp
.if n \{\
.RS 4
.\}
.nf
<args>$(user)</args>
.fi
.if n \{\
.RE
.\}
.PP
Will expand to the username\&.
.SS "/clispec/$MODE/cmd/callback/exec/options"
.PP
The "options" element specifies how the command is be executed\&. It contains (in any order) zero or one "uid" elements, zero or one "gid" elements, zero or one "wd" elements, zero or one "batch" elements, zero or one of "interrupt" elements, and zero or one "ignoreExitValue" elements\&.
.SS "/clispec/$MODE/cmd/callback/exec/options/uid (idType) [confd]"
.PP
The "uid" element specifies which user id to use when executing the command\&. Possible values are:
.PP
\fIconfd\fR (default)
.RS 4
The command is run as the same user id as the ConfD daemon\&.
.RE
.PP
\fIuser\fR
.RS 4
The command is run as the same user id as the user logged in to the CLI, i\&.e\&. we have to make sure that this user id exists as an actual user id on the device\&.
.RE
.PP
\fIroot\fR
.RS 4
The command is run as root\&.
.RE
.PP
\fI<uid>\fR (the numerical user \fI<uid>\fR)
.RS 4
The command is run as the user id <uid>\&.
.sp
\fINote:\fR
If uid is set to either "user", "root" or "<uid>" the the ConfD daemon must have been started as root (or setuid), or the cmdptywrapper must have setuid root permissions\&.
.RE
.SS "/clispec/$MODE/cmd/callback/exec/options/gid (idType) [confd]"
.PP
The "gid" element specifies which group id to use when executing the command\&. Possible values are:
.PP
\fIconfd\fR (default)
.RS 4
The command is run as the same group id as the ConfD daemon\&.
.RE
.PP
\fIuser\fR
.RS 4
The command is run as the same group id as the user logged in to the CLI, i\&.e\&. we have to make sure that this group id exists as an actual group on the device\&.
.RE
.PP
\fIroot\fR
.RS 4
The command is run as root\&.
.RE
.PP
\fI<gid>\fR (the numerical group \fI<gid>\fR)
.RS 4
The command is run as the group id <gid>\&.
.sp
\fINote:\fR
If gid is set to either "user", "root" or "<gid>" the the ConfD daemon must have been started as root (or setuid), or the cmdptywrapper must have setuid root permissions\&.
.RE
.SS "/clispec/$MODE/cmd/callback/exec/options/wd (xs:token)"
.PP
The "wd" element specifies which working directory to use when executing the command\&. If not given, the command is executed from the location of the CLI\&.
.SS "/clispec/$MODE/cmd/callback/exec/options/pty (xs:boolean)"
.PP
The "pty" element specifies weather a pty should be allocated when executing the command\&. The default is to allocate a pty for operational and configure osCommands, but not for osCommands executing as a pipe command\&. This behavior can be overridden with this parameter\&.
.SS "/clispec/$MODE/cmd/callback/exec/options/globalNoDuplicate (xs:token)"
.PP
The "globalNoDuplicate" element specifies that only one instance with the same name can be run at any one time in the system\&. The command can be started either from the CLI, the Web UI or through NETCONF\&.
.SS "/clispec/$MODE/cmd/callback/exec/options/noInput (xs:token)"
.PP
The "noInput" element specifies that the command should not grab the input stream and consume freely from that\&. This option should be used if the command should not consume input characters\&. If not used then the command will eath all data from the input stream and cut\-and\-paste may not work as intended\&.
.SS "/clispec/$MODE/cmd/callback/exec/options/batch"
.PP
The "batch" element makes it possible to specify that a command returns immediately but still runs in the background, optionally generating output on stdout\&. An example of such a command is the standard "monitor start" command, which prints additional data appended to a (log) file:
.sp
.if n \{\
.RS 4
.\}
.nf
joe@io> monitor start /var/log/messages
joe@io>
log: Apr 10 11:59:32 earth ntpd[530]: kernel time sync enabled 2001
.fi
.if n \{\
.RE
.\}
.PP
\fITen seconds later\&.\&.\&.\fR
.sp
.if n \{\
.RS 4
.\}
.nf
log: Apr 12 01:59:02 earth sshd[26847]: error: PAM: auth error for cathy
joe@io> monitor stop /var/log/messages
joe@io>
.fi
.if n \{\
.RE
.\}
.PP
The "batch" element contains (in order) one "group" element, an optional "prefix" element, and an optional "noDuplicate" element\&. The prefix defaults to the empty string\&.
.PP
An example from
confd
\&.cli implementing the monitor functionality:
.sp
.if n \{\
.RS 4
.\}
.nf
<cmd name="start">
  \&.\&.\&.
  <callback>
    <exec>
      <osCommand>tail</osCommand>
      <args>\-f \-n 0</args>
      <options>
        \&.\&.\&.
        <batch>
          <group>monitor_file</group>
          <prefix>log:</prefix>
          <noDuplicate/>
        </batch>
      </options>
    </exec>
  </callback>
  \&.\&.\&.
</cmd>
.fi
.if n \{\
.RE
.\}
.PP
The batch group is used to kill the command as exemplified in the "execStop" element description below\&. "noDuplicate" indicates that a specific file is not allowed to be monitored by several commands in parallel\&.
.SS "/clispec/$MODE/cmd/callback/exec/options/batch/group (xs:NCName)"
.PP
The "group" element attaches a group label to the command\&. The group label is used when defining a "stop" command whose job it is to kill the background command\&. Take a look at the monitor example above for better understanding\&.
.PP
The stop command is defined using a "execStop" element as described below\&.
.SS "/clispec/$MODE/cmd/callback/exec/options/batch/prefix (xs:NCName)"
.PP
The "prefix" element specifies a string to prepend to all lines printed by the background command\&. In the monitor example above, "log:" is the chosen prefix\&.
.SS "/clispec/$MODE/cmd/callback/exec/options/batch/noDuplicate"
.PP
The "noDuplicate" element specifies that only a single instance of this batch command, including the given/specified parameters, can run in the background\&.
.SS "/clispec/$MODE/cmd/callback/exec/options/interrupt (interruptType) [sigkill]"
.PP
The "interrupt" element specifies what should happen when the user enters ctrl\-c in the CLI\&. Possible values are:
.PP
\fIsigkill\fR (default)
.RS 4
The command is terminated by sending the sigkill signal\&.
.RE
.PP
\fIsigint\fR
.RS 4
The command is interrupted by the sigint signal\&.
.RE
.PP
\fIsigterm\fR
.RS 4
The command is interrupted by the sigterm signal\&.
.RE
.PP
\fIctrlc\fR
.RS 4
The command is sent the ctrl\-c character which is interpreted by the pty\&.
.RE
.SS "/clispec/$MODE/cmd/callback/exec/options/ignoreExitValue(xs:boolean) [false]"
.PP
The "ignoreExitValue" element specifies if the CLI engine should ignore the fact that the command returns a non\-zero value\&. Normally it signals an error on stdout if a non\-zero value is returned\&.
.SS "/clispec/$MODE/cmd/callback/execStop"
.PP
The "execStop" element specifies that a command defined by an "exec" element is to be killed\&.
.PP
Attributes:
.PP
\fIbatchGroup\fR (xs:NCName)
.RS 4
The "batchGroup" attribute is mandatory\&. It specifies a background command to kill\&. It corresponds to a group label defined by another "exec" command using the "batch" element\&.
.sp
An example from
confd\&.cli which kills a background monitor session:
.sp
.if n \{\
.RS 4
.\}
.nf
<cmd name="stop">
  \&.\&.\&.
  <callback>
    <execStop batchGroup="monitor_file"/>
  </callback>
  \&.\&.\&.
</cmd>
.fi
.if n \{\
.RE
.\}
.RE
.SS "/clispec/$MODE/cmd/params"
.PP
The "params" element lists which parameters the CLI should prompt for\&. These parameters are then used as arguments to either the CAPI callback or the OS executable command (as specified by the "capi" element or the "exec" element, respectively)\&. If an "args" element as well as a "params" element has been specified, all of them are used as arguments: first the "args" arguments and then the "params" values are passed to the CAPI callback or executable\&.
.PP
The "params" element contains (in order) zero or more "param" elements and zero or one "any" elements\&.
.PP
Attributes:
.PP
\fImode\fR (list|choice)
.RS 4
This is an optional attribute\&. If it is "choice" then at least "min" and at most "max" params must be given by the user\&. If it is "list" then all non\-optional parameters must be given the command in the order they appear in the list\&.
.RE
.PP
\fImin\fR (xs:nonNegativeInteger)
.RS 4
This optional attribute defines the minumun number of parameters from the body of the "params" element that the user must supply with the command\&. It is only applicable if the mode attribute has been set to "choice"\&. The default value is "1"\&.
.RE
.PP
\fImax\fR (xs:nonNegativeInteger | unlimited)
.RS 4
This optional attribute defines the maximum number of parameters from the body of the "params" element that the user may supply with the command\&. It is only applicable if the mode attribute has been set to "choice"\&. The default value is "1" unless multi is specified, in which case the default is "unlimited"\&.
.RE
.PP
\fImulti\fR (xs:boolean)
.RS 4
This optional attribute controls if each parameters should be allowed to be entered more than once\&. If set to "true" then each parameter may occur multiple times\&. The default is "false"\&.
.RE
.PP
An example from
confd\&.cli which copies one file to another:
.sp
.if n \{\
.RS 4
.\}
.nf
<params>
  <param>
    <type><file/></type>
    \&.\&.\&.
  </param>
  <param>
    <type><file/></type>
    \&.\&.\&.
   </param>
   \&.\&.\&.
</params>
.fi
.if n \{\
.RE
.\}
.SS "/clispec/$MODE/cmd/params/param"
.PP
The "param" element defines the nature of a single parameter which the CLI should prompt for\&. It contains (in any order) zero or one "type" element, zero or one "info" element, zero or one "help" element, zero or one "optional" element, zero or one "name" element, zero or one "params" element, zero or one "auditLogHide" element, zero or one "prefix" element, zero or one "flag" element, zero or one "id" element, zero or one "hideGroup" element, and zero or one "simpleType" element and zero or one "completionId" element\&.
.SS "/clispec/$MODE/cmd/params/param/type"
.PP
The "type" element is optional and defines the parameter type\&. It contains either a "enums", "enumerate", "void", "keypath", "file", "url_file", "simpleType", "xpath", "url_directory_file", "directory_file", "url_directory" or a "directory" element\&. If the "type" element is not present, the value entered by the user is passed unmodified to the callback\&.
.SS "/clispec/$MODE/cmd/params/param/type/enums (enumsType)"
.PP
The "enums" element defines a list of allowed enum values for the parameter\&. enumsType is a space\-separated list of string enums\&.
.PP
An example:
.sp
.if n \{\
.RS 4
.\}
.nf
<enums>for bar baz</enums>
.fi
.if n \{\
.RE
.\}
.SS "/clispec/$MODE/cmd/params/param/type/enumerate"
.PP
The "enumerate" is used to define a set of values with info text\&. It can contain one of more of the element "elem"\&.
.SS "/clispec/$MODE/cmd/params/param/type/enumerate/enum"
.PP
The "enum" is used to define an enumeration value with help text\&. It must contain the element "name" and optionally an "info" element and a "hideGroup" element\&.
.SS "/clispec/$MODE/cmd/params/param/type/enumerate/enum/name(xs:token)"
.PP
The "name" is used to define the name of an enumeration\&.
.SS "/clispec/$MODE/cmd/params/param/type/enumerate/enum/info(xs:string)"
.PP
The "info" is used to define the info that is displayed during completion in the CLI\&. The element is optional\&.
.SS ""
.PP
/clispec/$MODE/cmd/params/param/type/enumerate/enum/hideGroup(xs:string)
.PP
The "hideGroup" element makes an enum value invisible and it cannot be used even if a user knows about its existence\&. The enum value will become visible when the hide group is \*(Aqunhidden\*(Aq using the unhide command\&.
.SS "/clispec/$MODE/cmd/params/param/type/void"
.PP
The "void" element is used to indicate that this parameter should not prompt for a value\&. It can only be used when the "name" element is used\&.
.SS "/clispec/$MODE/cmd/params/param/type/keypath (keypathType)"
.PP
The "keypath" element specifies that the parameter must be a keypath pointing to a configuration value\&. Valid keypath values are:
\fInew\fR
or
\fIexist\fR:
.PP
\fInew\fR
.RS 4
The keypath is either an already existing configuration value or an instance value to be created\&.
.RE
.PP
\fIexist\fR
.RS 4
The keypath must be an already existing configuration value\&.
.RE
.SS "/clispec/$MODE/cmd/params/param/type/key (path)"
.PP
The "key" element specifies that the parameter is an instance identifier, either an existing instance or a new\&. If the list has multiple key elements then they will be entered with a space in between\&.
.PP
The path should point to a list element, not the actual key leaf\&. If the list has multiple keys then they user will be requested to enter all keys of an instance\&. The path may be either absolute or relative to the current submode path\&. Also variables referring to key elements in the current submode path may be used, where the closes key is named $(key\-1\-1), $(key\-1\-2) etc\&. Eg
.sp
.if n \{\
.RS 4
.\}
.nf
/foo{key\-2\-1,key\-2\-2}/bar{key\-1\-1,key\-1\-2}/\&.\&.\&.
.fi
.if n \{\
.RE
.\}
.PP
Attributes:
.PP
\fImode\fR (keypathType)
.RS 4
The "mode" attribute is mandatory\&. It specifies if the parameter refers to an existing (exist) instance or a new (new) instance\&.
.RE
.SS "/clispec/$MODE/cmd/params/param/type/pattern (patternType)"
.PP
The "pattern" element specifies that the parameter must be a show command pattern\&. Valid pattern values are:
\fIstats\fR
or
\fIconfig\fR
or
\fIall\fR:
.PP
\fIstats\fR
.RS 4
The pattern is only related to "config false" nodes in the data model\&. Note that CLI modifications such as fullShowPath, incompleteShowPath etc are applied to this pattern\&.
.RE
.PP
\fIconfig\fR
.RS 4
The pattern is only related to "config true" elements in the data model\&.
.RE
.PP
\fIall\fR
.RS 4
The pattern spans over all visible nodes in the data model\&.
.RE
.SS "/clispec/$MODE/cmd/params/param/type/file"
.PP
The "file" element specifies that the parameter is a file on disk\&. The CLI automatically enables tab completion to help the user to choose the correct file\&.
.PP
Attributes:
.PP
\fIwd\fR (xs:token)
.RS 4
The "wd" attribute is optional\&. It specifies a working directory to be used as the root for the tab completion algorithm\&. If no "wd" attribute is specified, the working directory is as defined for the "/clispec/$MODE/cmd/callback/exec/options/wd" element\&.
.RE
.PP
An example:
.sp
.if n \{\
.RS 4
.\}
.nf
<file wd="/var/log/"/>
.fi
.if n \{\
.RE
.\}
.SS "/clispec/$MODE/cmd/params/param/type/url_file"
.PP
The "url_file" element specifies that the parameter is a file on disk or an URL\&. The CLI automatically enables tab completion to help the user to choose the correct file\&.
.PP
Attributes:
.PP
\fIwd\fR (xs:token)
.RS 4
The "wd" attribute is optional\&. It specifies a working directory to be used as the root for the tab completion algorithm\&. If no "wd" attribute is specified, the working directory is as defined for the "/clispec/$MODE/cmd/callback/exec/options/wd" element\&.
.RE
.PP
An example:
.sp
.if n \{\
.RS 4
.\}
.nf
<file wd="/var/log/"/>
.fi
.if n \{\
.RE
.\}
.SS "/clispec/$MODE/cmd/params/param/type/simpleType"
.PP
The "simpleType" element specifies that the parameter should conform to some specific simpleType specified in a namespace\&. It can contain zero or one "info" element
.PP
Attributes:
.PP
\fInamespace\fR (xs:string)
.RS 4
The "namespace" attribute is required\&. It specifies in which namespace the type is found\&. It can be either the namespace URI or the namespace prefix\&.
.RE
.PP
\fIname\fR (xs:string)
.RS 4
The "name" attribute is required\&. It specifies the name of the type in the given namespace\&.
.RE
.PP
\fIdisallowValue\fR (xs:string)
.RS 4
The "disallowValue" attribute is optional\&. It specifies a regular expression of unaccepted values\&.
.RE
.PP
An example:
.sp
.if n \{\
.RS 4
.\}
.nf
<simpleType namespace="<ulink url=\*(Aqhttp://tail\-f\&.com/ns/confd/1\&.0\*(Aq>http://tail\-f\&.com/ns/confd/1\&.0</ulink>"
            name="inetAddressIP"/>
.fi
.if n \{\
.RE
.\}
.SS "/clispec/$MODE/cmd/params/param/type/simpleType/info"
.PP
The "info" element contains a single line describing the simpleType that will appear during auto\-completion\&. Note that this will override any other info texts provided by this type\&.
.SS "/clispec/$MODE/cmd/params/param/type/xpath"
.PP
The "xpath" element specifies that the parameter should conform to one of the values returned by the xpath expression given as attribute\&.
.PP
Attributes:
.PP
\fIexpr\fR (xs:string)
.RS 4
The "expr" attribute is required\&. It specifies an xpath expression that returns a set of valid values for this parameter\&. The expression may contain variables defined in the dict\&.
.RE
.PP
\fIctx\fR (xs:string)
.RS 4
The "ctx" attribute is optional\&. It specifies the context for the evaluation of the xpath expression\&. The path may contain variables defined in the dict\&.
.RE
.PP
\fIlax\fR (xs:boolean)
.RS 4
The "lax" attribute is optional\&. It specifies if the given value should be checked against the values given by the xpath expression\&. The default is "true" which means that tab completion will present the values given by the xpath expression but the parser will accept any value\&. This makes parsing a bit faster\&. When lax is set to "false" a syntax error will be generated if an unexisting value is given as parameter\&.
.RE
.PP
An example:
.sp
.if n \{\
.RS 4
.\}
.nf
<params>
  <param>
    <name>host</name>
    <type>
      <xpath expr="/simpleObjects/hosts/host/name" lax="false" />
    </type>
    <flag>\-\-host</flag>
    <id>hostname</id>
  </param>
  <param>
    <name>server</name>
    <type>
      <xpath expr="servers/server/name"
             ctx="/simpleObjects/hosts/host{$(hostname)}"/>
    </type>
    <flag>\-\-server</flag>
  </param>
</params>
.fi
.if n \{\
.RE
.\}
.SS "/clispec/$MODE/cmd/params/param/type/directory"
.PP
The "directory" element specifies that the parameter is a directory on disk\&. The CLI automatically enables tab completion to help the user choose the correct directory\&.
.PP
Attributes:
.PP
\fIwd\fR (xs:token)
.RS 4
The "wd" attribute is optional\&. It specifies a working directory to be used as the root for the tab completion algorithm\&. If no "wd" attribute is specified, the working directory is as defined for the "wd" element\&.
.RE
.PP
An example:
.sp
.if n \{\
.RS 4
.\}
.nf
<directory wd="/var/log/"/>
.fi
.if n \{\
.RE
.\}
.SS "/clispec/$MODE/cmd/params/param/type/url_directory"
.PP
The "url_directory" element specifies that the parameter is a directory on disk or an URL\&. The CLI automatically enables tab completion to help the user choose the correct directory\&.
.PP
Attributes:
.PP
\fIwd\fR (xs:token)
.RS 4
The "wd" attribute is optional\&. It specifies a working directory to be used as the root for the tab completion algorithm\&. If no "wd" attribute is specified, the working directory is as defined for the "wd" element\&.
.RE
.PP
An example:
.sp
.if n \{\
.RS 4
.\}
.nf
<directory wd="/var/log/"/>
.fi
.if n \{\
.RE
.\}
.SS "/clispec/$MODE/cmd/params/param/type/directory_file"
.PP
The "directory_file" element specifies that the parameter is a directory or a file on disk\&. The CLI automatically enables tab completion to help the user choose the correct directory or file\&.
.PP
An example:
.sp
.if n \{\
.RS 4
.\}
.nf
<directory_file/>
.fi
.if n \{\
.RE
.\}
.SS "/clispec/$MODE/cmd/params/param/type/url_directory_file"
.PP
The "url_directory_file" element specifies that the parameter is a directory or a file on disk or an URL\&. The CLI automatically enables tab completion to help the user choose the correct directory or file\&.
.PP
An example:
.sp
.if n \{\
.RS 4
.\}
.nf
<directory_file/>
.fi
.if n \{\
.RE
.\}
.SS "/clispec/$MODE/cmd/params/param/info (xs:string)"
.PP
The "info" element is a single text line describing the parameter\&.
.PP
An example:
.sp
.if n \{\
.RS 4
.\}
.nf
<cmd name="id" mount="">
  <info>Find uid and groups of a user</info>
  <help>Find uid and groups of a user, using the id program</help>
  <callback>
    <exec>
      <osCommand>id</osCommand>
    </exec>
  </callback>
  <params>
    <param>
      <info>User name</info>
      <help>User name</help>
    </param>
  </params>
</cmd>
.fi
.if n \{\
.RE
.\}
.PP
and when we do the following in the CLI we get:
.sp
.if n \{\
.RS 4
.\}
.nf
joe@x15> id <TAB>
User name
joe@x15> id snmp
uid=108(snmp) gid=65534(nogroup) groups=65534(nogroup)
[ok][2006\-08\-30 14:51:28]
.fi
.if n \{\
.RE
.\}
.PP
\fINote:\fR
This description is
\fIonly\fR
shown if the "type" element is left out\&.
.SS "/clispec/$MODE/cmd/params/param/help (xs:string)"
.PP
The "help" element is a multi\-line text string describing the parameter\&. This text is shown when we use the \*(Aq?\*(Aq character\&.
.SS "/clispec/$MODE/cmd/params/param/hideGroup (xs:string)"
.PP
The "hideGroup" element makes a CLI parameter invisible and it cannot be used even if a user knows about its existence\&. The parameter will become visible when the hide group is \*(Aqunhidden\*(Aq using the unhide command\&.
.PP
This mechanism correspond to the \*(Aqtailf:hidden\*(Aq statement in a YANG module\&.
.SS "/clispec/$MODE/cmd/params/param/name (xs:token)"
.PP
The "name" element is a token which has to be entered by the user before entering the actual parameter value\&. It is used to get named parameters\&.
.PP
An example:
.sp
.if n \{\
.RS 4
.\}
.nf
<cmd name="copy" mount="file">
  <info>Copy a file</info>
  <help>Copy a file from one location to another in the file system</help>
  <callback>
    <exec>
      <osCommand>cp</osCommand>
      <options>
        <uid>user</uid>
      </options>
    </exec>
  </callback>
  <params>
    <param>
      <type><file/></type>
      <info>&amp;lt;source file&amp;gt;</info>
      <help>source file</help>
      <name>from</name>
    </param>
    <param>
      <type><file/></type>
      <info>&amp;lt;destination file&amp;gt;></info>
      <help>destination file</help>
      <name>to</name>
    </param>
  </params>
</cmd>
.fi
.if n \{\
.RE
.\}
.PP
The result is that the user has to enter
.sp
.if n \{\
.RS 4
.\}
.nf
file copy from /tmp/orig to /tmp/copy
.fi
.if n \{\
.RE
.\}
.SS "/clispec/$MODE/cmd/params/param/prefix (xs:string)"
.PP
The "prefix" element is a string that is prepended to the argument before calling the osCommand\&. This can be used to add Unix style command flags in front of the supplied parameters\&.
.PP
An example:
.sp
.if n \{\
.RS 4
.\}
.nf
<cmd name="ssh">
  <info>Open a secure shell on another host</info>
  <help>Open a secure shell on another host</help>
  <callback>
    <exec>
      <osCommand>ssh</osCommand>
      <options>
        <uid>user</uid>
        <interrupt>ctrlc</interrupt>
      </options>
    </exec>
  </callback>
  <params>
    <param>
      <info>&amp;lt;login&amp;gt;</info>
      <help>Users login name on host</help>
      <name>user</name>
      <prefix>\-\-login=</prefix>
    </param>
    <param>
      <info>&amp;lt;host&amp;gt;</info>
      <help>host name or IP</help>
      <name>host</name>
    </param>
  </params>
</cmd>
.fi
.if n \{\
.RE
.\}
.PP
The user would enter for example
.sp
.if n \{\
.RS 4
.\}
.nf
ssh user joe host router\&.intranet\&.net
.fi
.if n \{\
.RE
.\}
.PP
and the resulting call to the ssh executable would become
.sp
.if n \{\
.RS 4
.\}
.nf
ssh \-\-login=joe router\&.intranet\&.net
.fi
.if n \{\
.RE
.\}
.SS "/clispec/$MODE/cmd/params/param/flag (xs:string)"
.PP
The "flag" element is a string that is prepended to the argument before calling the osCommand\&. In contrast to the prefix element it will not be appended to the current parameter, but instead appear as a separate argument, ie instead of adding a unix style flag as "\-\-foo=" (prefix) you add arguments in the style of "\-f <param>" where \-f is one arg and <param> is another\&. Both <prefix> and <flag> can be used at the same time\&.
.PP
An example:
.sp
.if n \{\
.RS 4
.\}
.nf
<cmd name="ssh">
  <info>Open a secure shell on another host</info>
  <help>Open a secure shell on another host</help>
  <callback>
    <exec>
      <osCommand>ssh</osCommand>
      <options>
        <uid>user</uid>
        <interrupt>ctrlc</interrupt>
      </options>
    </exec>
  </callback>
  <params>
    <param>
      <info>&amp;lt;login&amp;gt;</info>
      <help>Users login name on host</help>
      <name>user</name>
      <flag>\-l</flag>
    </param>
    <param>
      <info>&amp;lt;host&amp;gt;</info>
      <help>host name or IP</help>
      <name>host</name>
    </param>
  </params>
</cmd>
.fi
.if n \{\
.RE
.\}
.PP
The user would enter for example
.sp
.if n \{\
.RS 4
.\}
.nf
ssh user joe host router\&.intranet\&.net
.fi
.if n \{\
.RE
.\}
.PP
and the resulting call to the ssh executable would become
.sp
.if n \{\
.RS 4
.\}
.nf
ssh \-l joe router\&.intranet\&.net
.fi
.if n \{\
.RE
.\}
.SS "/clispec/$MODE/cmd/params/param/id (xs:string)"
.PP
The "id" is used for identifying the value of the parameter and can be used as a variable in the value of a key parameter\&.
.PP
An example:
.sp
.if n \{\
.RS 4
.\}
.nf
<cmd name="test">
  <info/>
  <help/>
  <callback>
    <exec>
      <osCommand>/bin/echo</osCommand>
    </exec>
  </callback>
  <params>
    <param>
      <name>host</name>
      <id>h</id>
      <type><key mode="exist">/host</key></type>
    </param>
    <param>
      <name>interface</name>
      <type><key mode="exist">/host{$(h)}/interface</key></type>
    </param>
  </params>
</cmd>
.fi
.if n \{\
.RE
.\}
.PP
There are also three builtin variables: user, uid and gid\&. The id and the builtin variables can be used in when specifying the path value of a key parameter, and also when specifying the wd attribute of the file, url_file, directory, and url_directory\&.
.SS "/clispec/$MODE/cmd/params/param/callback/capi"
.PP
Specifies that the parameter completion should be calculated through a callback function\&. It contains exactly one "completionpoint" element\&.
.SS "/clispec/$MODE/cmd/params/param/callback/capi/completionpoint (xs:string)"
.PP
Specifies the callpoint name of the completion function\&.
.SS "/clispec/$MODE/cmd/params/param/auditLogHide"
.PP
The "auditLogHide" element specifies that the parameter should be obfuscated in the audit log\&. This is suitable when clear text passwords are passed as command parameters\&.
.SS "/clispec/$MODE/cmd/params/param/optional"
.PP
The "optional" element specifies that the parameter is optional and not required\&. It contains zero or one "default" element\&. It cannot be used inside a params of type "choice"\&.
.SS "/clispec/$MODE/cmd/params/param/optional/default"
.PP
The "default" element makes it possible to specify a default value, should the parameter be left out\&.
.PP
An example:
.sp
.if n \{\
.RS 4
.\}
.nf
<optional>
    <default>42</default>
</optional>
.fi
.if n \{\
.RE
.\}
.SS "/clispec/$MODE/cmd/params/param/completionId xs:string"
.PP
The "completionId" element makes it possible to identify a specific parameter whenever it is referred to from a completion callback, i\&.e\&. a completion callback takes an optional completion ID parameter as input\&. Read more about completion callbacks in the
\m[blue]\fBconfd_lib_dp(3)\fR\m[]
manual page and in the "The CLI agent" User Guide chapter\&.
.SS "/clispec/$MODE/cmd/params/any"
.PP
The "any" element specifies that any number of parameters are allowed\&. It contains (in any order) one "info" element and one "help" element\&.
.SS "/clispec/$MODE/cmd/params/any/info (xs:string)"
.PP
The "info" element is a single text line describing the parameter(s) expected\&.
.PP
An example:
.sp
.if n \{\
.RS 4
.\}
.nf
<cmd name="evaluate" mount="">
  <info>Evaluate an arithmetic expression</info>
  <help>Evaluate an arithmetic expression, using the expr program</help>
  <callback>
    <exec>
      <osCommand>expr</osCommand>
    </exec>
  </callback>
  <params>
    <any>
      <info>Arithmetic expression</info>
      <help>Arithmetic expression</help>
    </any>
  </params>
</cmd>
.fi
.if n \{\
.RE
.\}
.PP
and when we do the following in the CLI we get:
.sp
.if n \{\
.RS 4
.\}
.nf
joe@xev> eva<TAB>
joe@xev> evaluate <TAB>
Arithmetic expression
joe@xev> evaluate 2 + 5
7
[ok][2006\-08\-30 14:47:17]
.fi
.if n \{\
.RE
.\}
.SS "/clispec/$MODE/cmd/params/any/help (xs:string)"
.PP
The "help" element is a multi\-line text string describing these anonymous parameters\&. This text is shown we use the \*(Aq?\*(Aq character\&.
.SS "/clispec/$MODE/cmd/options"
.PP
The "options" element specifies under what circumstances the CLI command should execute\&. It contains (in any order) zero or one "hidden" element, zero or one "hideGroup" element, zero or one "denyRunAccess" element, zero or one "notInterruptible" element, zero or one "pipeFlags" element, zero or one "negPipeFlags" element, zero or one of "submodeCommand" and "topModeCommand", zero or one of "displayWhen" element, and zero or one "paginate" element\&.
.SS "/clispec/$MODE/cmd/options/hidden"
.PP
The "hidden" element makes a CLI command invisible even though it can be evaluated if we know about its existence\&. This comes handy for commands which are used for debugging or are in pre\-release state\&.
.SS "/clispec/$MODE/cmd/options/hideGroup (xs:string)"
.PP
The "hideGroup" element makes a CLI command invisible and it cannot be used even if a user knows about its existence\&. The command will become visible when the hide group is \*(Aqunhidden\*(Aq using the unhide command\&.
.PP
This mechanism correspond to the \*(Aqtailf:hidden\*(Aq statement in a YANG module\&.
.SS "/clispec/operationalMode/cmd/options/denyRunAccess"
.PP
The "denyRunAccess" element is used to restrict the possibility to run an operational mode command from configure mode\&.
.PP
\fIComment:\fR
The built\-in "run" command is used to execute operational mode commands from configure mode\&.
.SS "/clispec/$MODE/cmd/options/displayWhen"
.PP
The "displayWhen" element can be used to add a displayWhen XPath condition to a command\&.
.PP
Attributes:
.PP
\fIexpr\fR (xpath expression)
.RS 4
The "expr" attribute is mandatory\&. It specifies an xpath expression\&. If the expression evaluates to true then the command is available, otherwise not\&.
.RE
.PP
\fIctx\fR (path)
.RS 4
The "ctx" attribute is optional\&. If not specified the current editpath/mode\-path is used as context node for the xpath evaluation\&. Note that the xpath expression will automatically evaluate to false if a display when expression is used for a top\-level command and no ctx is specified\&. The path may contain variables defined in the dict\&.
.RE
.SS "/clispec/$MODE/cmd/options/notInterruptible"
.PP
The "notInterruptible" element disables <ctrl\-c> and the execution of the CLI command can thus not be interrupted\&.
.SS "/clispec/$MODE/cmd/options/submodeCommand"
.PP
The "submodeCommand" element makes a CLI command visible in all submodes\&.
.SS "/clispec/$MODE/cmd/options/topModeCommand"
.PP
The "topModeCommand" element prevents a command mounted under a top mode command from being visible in all submodes\&.
.SS "/clispec/$MODE/cmd/options/pipeFlags"
.PP
The "pipeFlags" element is used to signal that certain pipe commands should be made available if this command is entered\&.
.SS "/clispec/$MODE/cmd/options/negPipeFlags"
.PP
The "negPipeFlags" element is used to signal that certain pipe commands should not be made available if this command is entered, ie it is used to block out specific pipe commands\&.
.SS "/clispec/$MODE/cmd/options/paginate"
.PP
The "paginate" element enables a filter for paging through CLI command output text one screen at a time\&.
.SH "SEE ALSO"
.PP
The ConfD User Guide
\fBconfdc\fR(1)
\- Confdc compiler
\fBconfd_lib_dp\fR(3)
\- callback library for connecting to ConfD
confd\&.cli \- The standard ConfD CLI commands\&.
clispec\&.xsd \- A W3C XML schema (http://tail\-f\&.com/ns/clispec/1\&.0) describing a clispec\&.
.SH "AUTHOR"
.PP
 <\&support@tail\-f\&.com\&>
.RS 4
.RE
.SH "COPYRIGHT"
.br
Copyright \(co 2018 Tail-f Systems AB
.br
