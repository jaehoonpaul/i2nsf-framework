<!-- -*- nxml -*- -->
<!-- This configuration is good for this example, but are in many ways
     atypical for a production system. It also does not contain all
     possible configuration options.

     Better starting points for a production confd.conf configuration
     file would be confd.conf.example. For even more information, see
     the confd.conf man page.
 -->

<confdConfig xmlns="http://tail-f.com/ns/confd_cfg/1.0">
  <!-- The loadPath is searched for javascript files, .fxs files etc -->

  <!--
      NOTE: if you change the loadPath, the daemon must be restarted,
      confd -r is not enough.
  -->
  <loadPath>
    <!-- References to current directory are not good practice in a
         production system, but makes it easier to get started with
         this example:
    -->
    <dir>.</dir>
  </loadPath>
  <stateDir>.</stateDir>

  <enableAttributes>true</enableAttributes>

  <cdb>
    <enabled>true</enabled>
    <!-- XXX Database is in current directory, not good for production -->
    <dbDir>./confd-cdb</dbDir>
    <operational><enabled>true</enabled></operational>
  </cdb>

  <logs>
    <!--
        Shared settings for how to log to syslog.
        Each log can be configured to log to file and/or syslog.  If a
        log is configured to log to syslog, the settings below are used.
    -->
    <syslogConfig>
      <!-- facility can be 'daemon', 'local0' ... 'local7' or an integer -->
      <facility>daemon</facility>
      <!-- if udp is not enabled, messages will be sent to local syslog -->
      <udp>
        <enabled>false</enabled>
        <host>syslogsrv.example.com</host>
        <port>514</port>
      </udp>
    </syslogConfig>

    <!--
        'confdlog' is a normal daemon log.  Check this log for
        startup problems of confd itself.
        By default, it logs directly to a local file, but it can be
        configured to send to a local or remote syslog as well.
    -->
    <confdLog>
      <enabled>true</enabled>
      <file>
        <enabled>true</enabled>
        <!-- XXX Extra copy of log file in current directory, not good for production -->
        <name>./confd.log</name>
      </file>
      <syslog>
        <enabled>true</enabled>
      </syslog>
    </confdLog>

    <!--
        The developer logs are supposed to be used as debug logs
        for troubleshooting user-written javascript and c code.  Enable
        and check these logs for problems with validation code etc.
    -->
    <developerLog>
      <enabled>true</enabled>
      <file>
        <enabled>true</enabled>
        <name>./devel.log</name>
      </file>
      <syslog>
        <enabled>true</enabled>
      </syslog>
    </developerLog>

    <auditLog>
      <enabled>true</enabled>
      <file>
        <enabled>false</enabled>
        <name>./audit.log</name>
      </file>
      <syslog>
        <enabled>true</enabled>
      </syslog>
    </auditLog>

    <!--
        The netconf log can be used to troubleshoot NETCONF operations,
        such as checking why e.g. a filter operation didn't return the
        data requested.
    -->
    <netconfLog>
      <enabled>true</enabled>
      <file>
        <enabled>false</enabled>
        <name>./netconf.log</name>
      </file>
      <syslog>
        <enabled>true</enabled>
      </syslog>
    </netconfLog>

  </logs>

  <!-- Defines which datastores confd will handle. -->
  <datastores>
    <!--
        'startup' means that the system keeps separate running and
        startup configuration databases.  When the system reboots for
        whatever reason, the running config database is lost, and the
        startup is read.
        Enable this only if your system uses a separate startup and
        running database.
    -->
    <startup>
      <enabled>false</enabled>
    </startup>

    <!--
        The 'candidate' is a shared, named alternative configuration
        database which can be modified without impacting the running
        configuration.  Changes in the candidate can be commit to running,
        or discarded.
        Enable this if you want your users to use this feature from
        NETCONF, CLI or WebGUI, or other agents.
    -->
    <candidate>
      <enabled>true</enabled>
      <implementation>confd</implementation>
      <storage>auto</storage>
      <filename>./confd_candidate.db</filename>
    </candidate>

    <!--
        By default, the running configuration is writable.  This means
        that the application must be prepared to handle changes to
        the configuration dynamically.  If this is not the case, set
        'access' to 'read-only'.  If running is read-only, 'startup'
        must be enabled, and 'candidate' must be disabled.  This means that
        the application reads the configuration at startup, and then
        the box must reboort in order for the application to re-read it's
        configuration.

        NOTE: this is not the same as the NETCONF capability
              :writable-running, which merely controls which NETCONF
              operations are allowed to write to the running configuration.
    -->
    <running>
      <access>read-write</access>
    </running>

  </datastores>

  <aaa>

    <sshServerKeyDir>../conf/etc/confd/ssh</sshServerKeyDir>

    <pam>
      <enabled>false</enabled>
      <service>system-auth</service>
    </pam>
    <aaaBridge>
      <enabled>false</enabled>
    </aaaBridge>

    <localAuthentication>
      <enabled>true</enabled>
    </localAuthentication>
  </aaa>

  <netconf>
    <enabled>true</enabled>

    <transport>
      <ssh>
        <enabled>true</enabled>
        <ip>0.0.0.0</ip>
        <port>2022</port>
      </ssh>

      <!--
          NETCONF over TCP is not standardized, but it can be useful
          during development in order to use e.g. netcat for scripting.
      -->
      <tcp>
        <enabled>true</enabled>
        <ip>127.0.0.1</ip>
        <port>2023</port>
      </tcp>
    </transport>

    <capabilities>
      <!-- enable only if /confdConfig/datastores/startup is enabled -->
      <startup>
        <enabled>false</enabled>
      </startup>

      <!-- enable only if /confdConfig/datastores/candidate is enabled -->
      <candidate>
        <enabled>true</enabled>
      </candidate>

      <confirmed-commit>
        <enabled>true</enabled>
      </confirmed-commit>

      <!--
           enable only if /confdConfig/datastores/writable-running is
           enabled
      -->
      <writable-running>
        <enabled>true</enabled>
      </writable-running>

      <rollback-on-error>
        <enabled>true</enabled>
      </rollback-on-error>

      <notification>
        <enabled>true</enabled>
      </notification>

    </capabilities>

  </netconf>


  <notifications>
    <eventStreams>
      <stream>
        <name>linkUp</name>
        <description>Example notifications</description>
        <replaySupport>true</replaySupport>
      </stream>
    </eventStreams>
  </notifications>

</confdConfig>
